{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Effectors/Effector.js","webpack:///./src/SoundModule/Effectors/Compressor.js","webpack:///./src/SoundModule/Effectors/Distortion.js","webpack:///./src/SoundModule/Effectors/Wah.js","webpack:///./src/SoundModule/Effectors/Equalizer.js","webpack:///./src/SoundModule/Effectors/Filter.js","webpack:///./src/SoundModule/Effectors/Autopanner.js","webpack:///./src/SoundModule/Effectors/AutopannerFallback.js","webpack:///./src/SoundModule/Effectors/Tremolo.js","webpack:///./src/SoundModule/Effectors/Ringmodulator.js","webpack:///./src/SoundModule/Effectors/Phaser.js","webpack:///./src/SoundModule/Effectors/Flanger.js","webpack:///./src/SoundModule/Effectors/Chorus.js","webpack:///./src/SoundModule/Effectors/Delay.js","webpack:///./src/SoundModule/Effectors/Reverb.js","webpack:///./src/SoundModule/Effectors/Panner.js","webpack:///./src/SoundModule/Effectors/Listener.js","webpack:///./src/SoundModule/Effectors/EnvelopeGenerator.js","webpack:///./src/SoundModule/index.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/NoiseModule/index.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/ProcessorModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visualizer","constructor","sampleRate","this","isActive","graphics","canvas","context","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","setup","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","param","k","String","replace","toLowerCase","v","undefined","parseFloat","Array","isArray","isError","grads","isNaN","toString","prop","test","parseInt","start","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","state","Boolean","drawTimeDomainFloat32ArrayOnCanvas","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","len","length","x","y","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","gradients","addColorStop","fillRect","drawTimeDomainFloat32ArrayBySVG","linearGradientId","path","document","createElementNS","XMLNS","setAttribute","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","stop","createFontString","TimeOverview","super","savedImage","currentTime","plotInterval","textInterval","isDown","DRAG_MODE_UPDATE","offsetX","startTime","arguments","DRAG_MODE_SPRITE","height","Math","floor","nTextInterval","clearRect","fillText","measureText","texts","trim","getImageData","getAttribute","innerHTML","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","textContent","classList","add","SVG_CURRENT_TIME_CLASS_NAME","update","time","ImageData","putImageData","abs","querySelector","drag","callback","drawNode","move","end","navigator","userAgent","onStart","onMove","onEnd","removeEventListener","window","addEventListener","draw","event","type","offsetLeft","parentNode","getOffsetX","preventDefault","pageX","touches","Time","UINT","FLOAT","ceil","SVG_LINEAR_GRADIENT_ID_TIME","FFT","min","max","mindB","maxdB","range","drawnSize","fsDivN","f","slice","SVG_LINEAR_GRADIENT_ID_FFT","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","setTimeout","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","analyser","createAnalyser","input","createGain","connect","timeOverviewL","timeOverviewR","fft","fftSize","smoothingTimeConstant","frequencyBinCount","domain","buffer","AudioBuffer","numberOfChannels","set","getChannelData","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","toUpperCase","Recorder","bufferSize","numberOfInputs","numberOfOutputs","processor","createScriptProcessor","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","paused","gainL","gainR","ready","track","isTrack","onaudioprocess","inputLs","inputBuffer","inputRs","recordedLs","recordedRs","push","disconnect","getActiveTrack","flatTrack","channel","tracks","flattenTrack","j","mixTrack","mixes","values","sum","num","currentBuffer","index","numberOfMaxBuffers","currentTrack","mix","clear","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","URL","webkitURL","mozURL","fromCharCode","base64","btoa","waves","blob","Blob","createObjectURL","Session","sender","BUFFER_SIZE","receiver","websocket","tls","host","port","openCallback","closeCallback","errorCallback","properties","open","close","error","scheme","charAt","WebSocket","binaryType","onopen","onclose","onerror","onmessage","ArrayBuffer","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","outputLs","outputBuffer","outputRs","destination","isConnected","bufferedAmount","send","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Effector","output","lfo","createOscillator","depth","rate","frequency","noteOn","noteOff","isStop","stopTime","releaseTime","params","toJSON","JSON","stringify","Compressor","compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion","distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","gain","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Wah","lowpass","depthRate","cutoff","resonance","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Autopanner","panner","createStereoPanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPES","sine","square","sawtooth","triangle","Ringmodulator","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","feedback","stage","Flanger","delay","createDelay","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","successCallback","decodeAudioData","preset","timeout","progressCallback","success","progress","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogresss","abort","ERROR_AJAX","onload","status","arrayBuffer","response","decodeSuccessCallback","audioBuffer","decodeErrorCallback","ERROR_DECODE","responseType","Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","positionX","AudioParam","positionY","positionZ","setPosition","orientationX","orientationY","orientationZ","setOrientation","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Listener","listener","forwards","ups","forwardX","forwardY","forwardZ","upX","upY","upZ","EnvelopeGenerator","generators","activeIndexes","activeCounter","AudioNode","activeIndex","useCurve","setValueCurveAtTime","getGenerator","setGenerator","counter","MIN_GAIN","isDisconnect","generator","SoundModule","init","mastervolume","recorder","session","forEach","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","wah","equalizer","autopanner","tremolo","ringmodulator","phaser","flanger","chorus","reverb","envelopegenerator","resize","getBufferSize","install","effector","every","source","connects","on","off","Oscillator","setPeriodicWave","setWaveTable","volume","octave","fine","customs","real","imag","reals","imags","MAX_SIZE","subarray","periodicWave","createPeriodicWave","OCTAVE","detune","Glide","frequencies","LINEAR","EXPONENTIAL","diff","oscillator","OscillatorModule","sources","times","isAnalyser","glide","states","st","sp","processCallback","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","loop","onprogress","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","onended","oneshot","reset","NoiseModule","WHITE_NOISE","PINK_NOISE","BROWNIAN_NOISE","lastOut","random","b0","b1","b2","b3","b4","b5","b6","white","VocalCanceler","dataL","dataR","AudioModule","callbacks","decode","ended","vocalcanceler","duration","endTime","toggle","isBuffer","isSource","isPaused","fadeIn","fadeOut","sprite","sprites","dataLs","dataRs","keys","reduce","audioBuffers","spritedDataLs","spritedDataRs","createBuffer","copyToChannel","audio","playbackrate","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","loadstart","pause","HTMLMediaElement","channelCount","src","indexOf","Error","position","play","then","pos","catch","Promise","resolve","reject","isMedia","requestPictureInPicture","pictureInPictureEnabled","disablePictureInPicture","pictureInPictureElement","exitPictureInPicture","NoiseGate","level","StreamModule","constraints","video","stream","noisegate","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","isStreaming","MixerModule","ProcessorModule","ScriptProcessorNode","AudioWorkletNode","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","next","done","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","node","isSequences","toABC","mml","X","T","M","L","K","abc","totalDuration","splittedNotes","splittedNote","matches","tuplet","chordLength","restNote","read","file","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","computedIndex","MIN_A","FREQUENCY_RATIO","global","XSound","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","noise","mixer","midi","SAMPLE_RATE","ajax","convertTime","minutes","seconds","milliseconds","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","Event","stopPropagation","dataTransfer","files","target","File","requestFullscreen","Element","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","toFrequencies","toTextFile","string","converted","charCode","charCodeAt","toAscii","resume","clone","clones","C","free","sourceList","noConflict","deep","getCurrentTime"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            // this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            // this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = -1 * (data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = data[i] * (innerHeight / 2);\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class TimeOverview extends Visualizer {\n    static SVG_CURRENT_TIME_CLASS_NAME = 'xsound-svg-current-time';\n    static DRAG_MODE_UPDATE = 'update';\n    static DRAG_MODE_SPRITE = 'sprite';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(0, 0, 0, 0.5)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                    // Draw text at intervals of this value [sec]\n\n        this.isDown = false;\n\n        this.mode = TimeOverview.DRAG_MODE_UPDATE;  // or 'sprite'\n\n        this.offsetX   = 0;  // for Audio Sprite\n        this.startTime = 0;  // for Audio Sprite\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                case 'mode':\n                    if (value === undefined) {\n                        return this.mode;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === TimeOverview.DRAG_MODE_UPDATE) || (v === TimeOverview.DRAG_MODE_SPRITE)) {\n                        this.mode = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add(TimeOverview.SVG_CURRENT_TIME_CLASS_NAME);\n\n        rect.setAttribute('y', (this.styles.top + 1));\n        rect.setAttribute('height', (innerHeight - 1));\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill', this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n\n                    if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n                        context.fillRect(this.styles.left, (this.styles.top + 1), x, (innerHeight - 1));\n                    } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n                        if (x >= this.offsetX) {\n                            context.fillRect((this.styles.left + this.offsetX), (this.styles.top + 1), Math.abs(x - this.offsetX), (innerHeight - 1));\n                        } else {\n                            context.fillRect((this.styles.left + x), (this.styles.top + 1), Math.abs(x - this.offsetX), (innerHeight - 1));\n                        }\n                    }\n                }\n\n                break;\n            case Visualizer.SVG:\n                const rect = this.svg.querySelector(`.${TimeOverview.SVG_CURRENT_TIME_CLASS_NAME}`);\n\n                if (rect instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = ((t * this.sampleRate) / this.length) * innerWidth;\n\n                    if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n                        rect.setAttribute('x', this.styles.left);\n                        rect.setAttribute('width', x);\n                        // rect.setAttribute('transform', `translate(${x} 0)`);\n                        rect.setAttribute('aria-label', 'current time');\n                    } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n                        if (x >= this.offsetX) {\n                            rect.setAttribute('x', (this.styles.left + this.offsetX));\n                        } else {\n                            rect.setAttribute('x', (this.styles.left + x));\n                        }\n\n                        rect.setAttribute('width', Math.abs(x - this.offsetX));\n                        rect.setAttribute('aria-label', 'sprite time');\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        this.callback = Object.prototype.toString.call(callback) === '[object Function]' ? callback : () => {};\n\n        this.onStart = this.onStart.bind(this);\n        this.onMove  = this.onMove.bind(this);\n        this.onEnd   = this.onEnd.bind(this);\n\n        drawNode.removeEventListener(start, this.onStart, true);\n        drawNode.removeEventListener(move, this.onMove, true);\n        window.removeEventListener(end, this.onEnd, true);\n\n        drawNode.addEventListener(start, this.onStart, true);\n        drawNode.addEventListener(move, this.onMove, true);\n        window.addEventListener(end, this.onEnd, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(event, type, offsetX) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        if ((this.mode === TimeOverview.DRAG_MODE_SPRITE) && ((type === 'mousedown') || (type === 'touchstart'))) {\n            this.offsetX   = x;\n            this.startTime = time;\n        }\n\n        this.update(time);\n\n        if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n            this.callback(event, time);\n        } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n            if (this.startTime < time) {\n                this.callback(event, this.startTime, time);\n            } else if (this.startTime > time) {\n                this.callback(event, time, this.startTime);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onStart(event) {\n        this.draw(event, event.type, this.getOffsetX(event));\n        this.isDown = true;\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onMove(event) {\n        if (!this.isDown) {\n            return;\n        }\n\n        event.preventDefault();  // for Touch Panel\n        this.draw(event, event.type, this.getOffsetX(event));\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onEnd(event) {\n        if (!this.isDown) {\n            return;\n        }\n\n        this.draw(event, event.type, this.getOffsetX(event));\n\n        this.isDown    = false;\n        this.offsetX   = 0;\n        this.startTime = 0;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = (0.5 - (data[i] / 255)) * innerHeight;\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((data[i] / 255) - 0.5) * innerHeight;\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * ((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport { TimeOverview } from './TimeOverview';\nimport { Time } from './Time';\nimport { FFT } from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method flats recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @param {number} track This argument is track number.\n     * @return {Float32Array} This is returned as array for flatten sound.\n     */\n    flatTrack(channel, track) {\n        if (!this.isTrack(track)) {\n            return null;\n        }\n\n        const tracks     = this[`track${channel}s`][track];\n        const bufferSize = this.processor.bufferSize;\n\n        const flattenTrack = new Float32Array(tracks.length * bufferSize);\n\n        for (let i = 0, len = tracks.length; i < len; i++) {\n            for (let j = 0; j < bufferSize; j++) {\n                flattenTrack[(i * bufferSize) + j] = tracks[i][j];\n            }\n        }\n\n        return flattenTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @param {string} type This argument is one of 'blob', 'objecturl', 'base64', 'dataurl'.\n     * @return {Blob|string} This is returned as `Blob` or Object URL or Base64 or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit, type) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else if (this.isTrack(track)) {\n            soundLs = this.flatTrack('L', track);\n            soundRs = this.flatTrack('R', track);\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        const t = String(type).toLowerCase();\n\n        switch (t) {\n            case 'base64' :\n            case 'dataurl':\n                let wave = '';\n\n                wave += 'RIFF';\n                wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n                wave += 'WAVE';\n\n                // fmt chunk\n                wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n                wave += String.fromCharCode(1, 0);\n\n                // fmt chunk -> Channels (Monaural or Stereo)\n                wave += String.fromCharCode(CHANNEL, 0);\n\n                // fmt chunk -> Sample rate\n                wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n                // fmt chunk -> Byte per second\n                wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n                // fmt chunk -> Block size\n                wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n                // fmt chunk -> Byte per Sample\n                wave += String.fromCharCode(QBIT, 0);\n\n                // data chunk\n                wave += 'data';\n                wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n                for (let i = 0; i < SIZE; i++) {\n                    switch (QBIT) {\n                        case  8:\n                            wave += String.fromCharCode(sounds[i]);\n                            break;\n                        case 16:\n                            // The byte order in WAVE file is little endian\n                            wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                const base64 = window.btoa(wave);\n\n                if (t === 'base64') {\n                    return base64;\n                }\n\n                return `data:audio/wav;base64,${base64}`;\n            case 'blob'     :\n            case 'objecturl':\n            default         :\n                const waves = [];\n\n                waves[0] = 0x52;  // 'R'\n                waves[1] = 0x49;  // 'I'\n                waves[2] = 0x46;  // 'F'\n                waves[3] = 0x46;  // 'F'\n\n                waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n                waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n                waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n                waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n                waves[8]  = 0x57;  // 'W'\n                waves[9]  = 0x41;  // 'A'\n                waves[10] = 0x56;  // 'V'\n                waves[11] = 0x45;  // 'E'\n\n                // fmt chunk\n                waves[12] = 0x66;  // 'f'\n                waves[13] = 0x6D;  // 'm'\n                waves[14] = 0x74;  // 't'\n                waves[15] = 0x20;  // ' '\n\n                waves[16] = 16;\n                waves[17] =  0;\n                waves[18] =  0;\n                waves[19] =  0;\n\n                waves[20] = 1;\n                waves[21] = 0;\n\n                // fmt chunk -> Channels (Monaural or Stereo)\n                waves[22] = CHANNEL;\n                waves[23] = 0;\n\n                // fmt chunk -> Sample rate\n                waves[24] = (RATE >>  0) & 0xFF;\n                waves[25] = (RATE >>  8) & 0xFF;\n                waves[26] = (RATE >> 16) & 0xFF;\n                waves[27] = (RATE >> 24) & 0xFF;\n\n                // fmt chunk -> Byte per second\n                waves[28] = (BPS >>  0) & 0xFF;\n                waves[29] = (BPS >>  8) & 0xFF;\n                waves[30] = (BPS >> 16) & 0xFF;\n                waves[31] = (BPS >> 24) & 0xFF;\n\n                // fmt chunk -> Block size\n                waves[32] = CHANNEL * (QBIT / 8);\n                waves[33] = 0;\n\n                // fmt chunk -> Byte per Sample\n                waves[34] = QBIT;\n                waves[35] = 0;\n\n                // data chunk\n                waves[36] = 0x64;  // 'd'\n                waves[37] = 0x61;  // 'a'\n                waves[38] = 0x74;  // 't\n                waves[39] = 0x61;  // 'a'\n\n                waves[40] = (DATA_SIZE >>  0) & 0xFF;\n                waves[41] = (DATA_SIZE >>  8) & 0xFF;\n                waves[42] = (DATA_SIZE >> 16) & 0xFF;\n                waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n                for (let i = 0; i < SIZE; i++) {\n                    switch (QBIT) {\n                        case  8:\n                            waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                            break;\n                        case 16:\n                            // The byte order in WAVE file is little endian\n                            waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                            waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                const blob = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n\n                if (t === 'blob') {\n                    return blob;\n                }\n\n                return window.URL.createObjectURL(blob);\n        }\n\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport class Session {\n    static BUFFER_SIZE = 2048;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        // HACK: Fix buffer size on different environments\n        this.sender   = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport { Effector }  from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        if ((this.panner.positionX instanceof AudioParam) && (this.panner.positionY instanceof AudioParam) && (this.panner.positionZ instanceof AudioParam)) {\n            this.panner.positionX.setValueAtTime(this.positions.x, context.currentTime);\n            this.panner.positionY.setValueAtTime(this.positions.y, context.currentTime);\n            this.panner.positionZ.setValueAtTime(this.positions.z, context.currentTime);\n        } else {\n            this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        }\n\n        if ((this.panner.orientationX instanceof AudioParam) && (this.panner.orientationY instanceof AudioParam) && (this.panner.orientationZ instanceof AudioParam)) {\n            this.panner.orientationX.setValueAtTime(this.orientations.x, context.currentTime);\n            this.panner.orientationY.setValueAtTime(this.orientations.y, context.currentTime);\n            this.panner.orientationZ.setValueAtTime(this.orientations.z, context.currentTime);\n        } else {\n            this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n        }\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n\n                        if ((this.panner.positionX instanceof AudioParam) && (this.panner.positionY instanceof AudioParam) && (this.panner.positionZ instanceof AudioParam)) {\n                            this.panner.positionX.setValueAtTime(this.positions.x, this.context.currentTime);\n                            this.panner.positionY.setValueAtTime(this.positions.y, this.context.currentTime);\n                            this.panner.positionZ.setValueAtTime(this.positions.z, this.context.currentTime);\n                        } else {\n                            this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                        }\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n\n                        if ((this.panner.orientationX instanceof AudioParam) && (this.panner.orientationY instanceof AudioParam) && (this.panner.orientationZ instanceof AudioParam)) {\n                            this.panner.orientationX.setValueAtTime(this.orientations.x, this.context.currentTime);\n                            this.panner.orientationY.setValueAtTime(this.orientations.y, this.context.currentTime);\n                            this.panner.orientationZ.setValueAtTime(this.orientations.z, this.context.currentTime);\n                        } else {\n                            this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                        }\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v >= 0) && (v <= 360)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v >= 0) && (v <= 360)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if ((v >= 0) && (v <= 1)) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Listener extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.forwards  = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        if ((this.listener.positionX instanceof AudioParam) && (this.listener.positionY instanceof AudioParam) && (this.listener.positionZ instanceof AudioParam)) {\n            this.listener.positionX.setValueAtTime(this.positions.x, context.currentTime);\n            this.listener.positionY.setValueAtTime(this.positions.y, context.currentTime);\n            this.listener.positionZ.setValueAtTime(this.positions.z, context.currentTime);\n        } else {\n            this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        }\n\n        if ((this.listener.forwardX instanceof AudioParam)\n            && (this.listener.forwardY instanceof AudioParam)\n            && (this.listener.forwardZ instanceof AudioParam)\n            && (this.listener.upX instanceof AudioParam)\n            && (this.listener.upY instanceof AudioParam)\n            && (this.listener.upZ instanceof AudioParam)) {\n            this.listener.forwardX.setValueAtTime(this.forwards.x, context.currentTime);\n            this.listener.forwardY.setValueAtTime(this.forwards.y, context.currentTime);\n            this.listener.forwardZ.setValueAtTime(this.forwards.z, context.currentTime);\n            this.listener.upX.setValueAtTime(this.ups.x, context.currentTime);\n            this.listener.upY.setValueAtTime(this.ups.y, context.currentTime);\n            this.listener.upZ.setValueAtTime(this.ups.z, context.currentTime);\n        } else {\n            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n        }\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n\n                        if ((this.listener.positionX instanceof AudioParam) && (this.listener.positionY instanceof AudioParam) && (this.listener.positionZ instanceof AudioParam)) {\n                            this.listener.positionX.setValueAtTime(this.positions.x, this.context.currentTime);\n                            this.listener.positionY.setValueAtTime(this.positions.y, this.context.currentTime);\n                            this.listener.positionZ.setValueAtTime(this.positions.z, this.context.currentTime);\n                        } else {\n                            this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                        }\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.forwards[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.forwards[k.charAt(1)] = v;\n\n                        if ((this.listener.forwardX instanceof AudioParam)\n                            && (this.listener.forwardY instanceof AudioParam)\n                            && (this.listener.forwardZ instanceof AudioParam)\n                            && (this.listener.upX instanceof AudioParam)\n                            && (this.listener.upY instanceof AudioParam)\n                            && (this.listener.upZ instanceof AudioParam)) {\n                            this.listener.forwardX.setValueAtTime(this.forwards.x, this.context.currentTime);\n                            this.listener.forwardY.setValueAtTime(this.forwards.y, this.context.currentTime);\n                            this.listener.forwardZ.setValueAtTime(this.forwards.z, this.context.currentTime);\n                            this.listener.upX.setValueAtTime(this.ups.x, this.context.currentTime);\n                            this.listener.upY.setValueAtTime(this.ups.y, this.context.currentTime);\n                            this.listener.upZ.setValueAtTime(this.ups.z, this.context.currentTime);\n                        } else {\n                            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n                        }\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n\n                        if ((this.listener.forwardX instanceof AudioParam)\n                            && (this.listener.forwardY instanceof AudioParam)\n                            && (this.listener.forwardZ instanceof AudioParam)\n                            && (this.listener.upX instanceof AudioParam)\n                            && (this.listener.upY instanceof AudioParam)\n                            && (this.listener.upZ instanceof AudioParam)) {\n                            this.listener.forwardX.setValueAtTime(this.forwards.x, this.context.currentTime);\n                            this.listener.forwardY.setValueAtTime(this.forwards.y, this.context.currentTime);\n                            this.listener.forwardZ.setValueAtTime(this.forwards.z, this.context.currentTime);\n                            this.listener.upX.setValueAtTime(this.ups.x, this.context.currentTime);\n                            this.listener.upY.setValueAtTime(this.ups.y, this.context.currentTime);\n                            this.listener.upZ.setValueAtTime(this.ups.z, this.context.currentTime);\n                        } else {\n                            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n                        }\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'positions' : this.positions,\n            'forwards'  : this.forwards,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        if ((input instanceof AudioNode) && (output instanceof AudioNode)) {\n            input.connect(this.generators[i]);\n            this.generators[i].connect(output);\n        } else if (input instanceof AudioNode) {\n            input.connect(this.generators[i]);\n        } else if (output instanceof AudioNode) {\n            this.generators[i].connect(output);\n        }\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @param {boolean} useCurve This argument is to use different methods.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime, useCurve) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            // NOTE: https://www.w3.org/TR/webaudio/#dom-audioparam-settargetattime\n            if (useCurve) {\n                this.generators[activeIndex].gain.setValueCurveAtTime(new Float32Array([1, 0.5, 0.25, 0]), t3, t4);\n            } else {\n                this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\nimport { Analyser } from './Analyser';\nimport { Recorder } from './Recorder';\nimport { Session } from './Session';\nimport { Effector } from './Effectors/Effector';\nimport { Compressor } from './Effectors/Compressor';\nimport { Distortion } from './Effectors/Distortion';\nimport { Wah } from './Effectors/Wah';\nimport { Equalizer } from './Effectors/Equalizer';\nimport { Filter } from './Effectors/Filter';\nimport { Autopanner } from './Effectors/Autopanner';\nimport { AutopannerFallback } from './Effectors/AutopannerFallback';\nimport { Tremolo } from './Effectors/Tremolo';\nimport { Ringmodulator } from './Effectors/Ringmodulator';\nimport { Phaser } from './Effectors/Phaser';\nimport { Flanger } from './Effectors/Flanger';\nimport { Chorus } from './Effectors/Chorus';\nimport { Delay } from './Effectors/Delay';\nimport { Reverb } from './Effectors/Reverb';\nimport { Panner } from './Effectors/Panner';\nimport { Listener } from './Effectors/Listener';\nimport { EnvelopeGenerator } from './Effectors/EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`, `ProcessorModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.init(context, bufferSize);\n    }\n\n    /**\n     * This method initials modules.\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    init(context, bufferSize) {\n        if (Array.isArray(this.modules) && (this.modules.length > 0)) {\n            this.mastervolume.disconnect(0);\n            this.mastervolume = null;\n\n            this.processor.disconnect(0);\n            this.processor = null;\n\n            this.analyser.input.disconnect(0);\n            this.analyser = null;\n\n            this.recorder.processor.disconnect(0);\n            this.recorder = null;\n\n            this.session.sender.disconnect(0);\n            this.session  = null;\n\n            this.modules.forEach(module => {\n                module.input.disconnect(0);\n                module.output.disconnect(0);\n                module = null;\n            });\n\n            this.modules = [];\n        }\n\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        let size = parseInt(bufferSize, 10);\n\n        switch (size) {\n            case   256:\n            case   512:\n            case  1024:\n            case  2048:\n            case  4096:\n            case  8192:\n            case 16384:\n                break;\n            default:\n                size = 0;\n                break;\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, size);\n        this.distortion        = new Distortion(context, size);\n        this.wah               = new Wah(context, size);\n        this.equalizer         = new Equalizer(context, size);\n        this.filter            = new Filter(context, size);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, size) : new AutopannerFallback(context, size);\n        this.tremolo           = new Tremolo(context, size);\n        this.ringmodulator     = new Ringmodulator(context, size);\n        this.phaser            = new Phaser(context, size);\n        this.flanger           = new Flanger(context, size);\n        this.chorus            = new Chorus(context, size);\n        this.delay             = new Delay(context, size);\n        this.reverb            = new Reverb(context, size);\n        this.panner            = new Panner(context, size);\n        this.listener          = new Listener(context, size);\n        this.envelopegenerator = new EnvelopeGenerator(context);\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 0, 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.init(this.context, bufferSize);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method installs customized effector.\n     * @param {string} name This argument is in order to select effector.\n     * @param {Effector} effector This argument is the subclass that extends `Effector` class.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    install(name, effector) {\n        if (!(effector instanceof Effector)) {\n            return this;\n        }\n\n        if (String(name) in this) {\n            return this;\n        }\n\n        this[name] = effector;\n\n        if (this.modules.every(module => module !== effector)) {\n            this.modules.push(effector);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                return this[m];  // Installed effector\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effector's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effector's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { Oscillator } from './Oscillator';\nimport { Glide } from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        if (source.loop) {\n            source.start(startTime, (startTime + source.loopStart), (source.loopEnd - startTime));\n        } else {\n            source.start(startTime);\n        }\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule }  from '../SoundModule';\n\nexport class NoiseModule extends SoundModule {\n    static WHITE_NOISE    = 'whitenoise';\n    static PINK_NOISE     = 'pinknoise';\n    static BROWNIAN_NOISE = 'browniannoise';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.type = NoiseModule.WHITE_NOISE;\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|NoiseModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = '';\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === NoiseModule.WHITE_NOISE) || (v === NoiseModule.PINK_NOISE) || (v === NoiseModule.BROWNIAN_NOISE)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        const bufferSize = this.processor.bufferSize;\n\n        let lastOut = 0;\n\n        this.processor.onaudioprocess = event => {\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            if (this.envelopegenerator.isStop()) {\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n            } else {\n                switch (this.type) {\n                    case NoiseModule.WHITE_NOISE:\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = 2 * (Math.random() - 0.5);\n                            outputRs[i] = 2 * (Math.random() - 0.5);\n                        }\n\n                        break;\n                    case NoiseModule.PINK_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        let b0 = 0;\n                        let b1 = 0;\n                        let b2 = 0;\n                        let b3 = 0;\n                        let b4 = 0;\n                        let b5 = 0;\n                        let b6 = 0;\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            b0 = (0.99886 * b0) + (white * 0.0555179);\n                            b1 = (0.99332 * b1) + (white * 0.0750759);\n                            b2 = (0.96900 * b2) + (white * 0.1538520);\n                            b3 = (0.86650 * b3) + (white * 0.3104856);\n                            b4 = (0.55000 * b4) + (white * 0.5329522);\n                            b5 = (-0.7616 * b5) - (white * 0.0168980);\n\n                            outputLs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n                            outputRs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n\n                            outputLs[i] *= 0.11;\n                            outputRs[i] *= 0.11;\n\n                            b6 = white * 0.115926;\n                        }\n\n                        break;\n                    case NoiseModule.BROWNIAN_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            outputLs[i] = (lastOut + (0.02 * white)) / 1.02;\n                            outputRs[i] = (lastOut + (0.02 * white)) / 1.02;\n\n                            lastOut = (lastOut + (0.02 * white)) / 1.02;\n\n                            outputLs[i] *= 3.5;\n                            outputRs[i] *= 3.5;\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[NoiseModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { VocalCanceler } from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        this.envelopegenerator.setGenerator(0);\n        this.envelopegenerator.param({\n            'attack'  : 0,\n            'decay'   : 0.01,\n            'sustain' : 1,\n            'release' : 0.01\n        });\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n\n                        const startTime   = this.context.currentTime;\n                        const currentTime = this.param('currentTime');\n                        const duration    = this.param('duration');\n\n                        this.envelopegenerator.start(startTime);\n                        this.envelopegenerator.stop((startTime + ((duration - currentTime) / v)), true);\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} startTime This argument is the time that audio is started at. The default value is 0.\n     * @param {number} endTime This argument is the time that audio is ended at. The default value is audio duration.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(startTime, endTime, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            // This value is `AudioContext#currentTime`\n            const currentTime = this.context.currentTime;\n\n            const start = parseFloat(startTime);\n            const end   = parseFloat(endTime);\n\n            if (end >= 0) {\n                this.currentTime = ((start >= 0) && (start <= end)) ? start : 0;\n            } else {\n                this.currentTime = ((start >= 0) && (start <= this.buffer.duration)) ? start : 0;\n            }\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n            this.source.loopStart          = this.currentTime;\n            this.source.loopEnd            = (end >= 0) ? end : this.buffer.duration;\n\n            // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.envelopegenerator.ready(0, this.source, this.processor);\n            this.connect(this.processor, connects);\n\n            if (end >= 0) {\n                this.source.start(currentTime, this.currentTime, (end - start));\n            } else {\n                this.source.start(currentTime, this.currentTime, (this.buffer.duration - this.currentTime));\n            }\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.envelopegenerator.start(currentTime);\n\n            if (end >= 0) {\n                this.envelopegenerator.stop((currentTime + ((end - start) / this.source.playbackRate.value)), true);\n            } else {\n                this.envelopegenerator.stop((currentTime + ((this.buffer.duration - start) / this.source.playbackRate.value)), true);\n            }\n\n            this.on(currentTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.loopEnd)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            this.callbacks.update(this.source, this.currentTime);\n                        }\n\n                        if (this.analyser.timeOverviewL.param('mode') === 'update') {\n                            this.analyser.timeOverviewL.update(this.currentTime);\n                        }\n\n                        if (this.analyser.timeOverviewR.param('mode') === 'update') {\n                            this.analyser.timeOverviewR.update(this.currentTime);\n                        }\n                    } else {\n                        if (this.source.loop) {\n                            this.stop();\n\n                            if ((this.analyser.timeOverviewL.param('mode') === 'sprite') || (this.analyser.timeOverviewR.param('mode') === 'sprite')) {\n                                this.start(this.source.loopStart, this.source.loopEnd, connects, processCallback);\n                            } else {\n                                this.start(0, this.buffer.duration, connects, processCallback);\n                            }\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} startTime This argument is the time that audio is started at. The default value is 0.\n     * @param {number} endTime This argument is the time that audio is ended at. The default value is audio duration.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(startTime, endTime, connects, processCallback) {\n        if (this.paused) {\n            this.start(startTime, endTime, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /**\n     * This method is getter or setter for fade-in time.\n     * @param {number} time This argument is fade-in time. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as fade-in time. Otherwise, this is returned for method chain.\n     */\n    fadeIn(time) {\n        if (time === undefined) {\n            return this.envelopegenerator.param('attack');\n        }\n\n        this.envelopegenerator.param('attack', time);\n\n        const startTime    = this.context.currentTime;\n        const currentTime  = this.param('currentTime');\n        const duration     = this.param('duration');\n        const playbackRate = this.param('playbackRate');\n\n        this.envelopegenerator.start(startTime);\n        this.envelopegenerator.stop((startTime + ((duration - currentTime) / playbackRate)), true);\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for fade-out time.\n     * @param {number} time This argument is fade-out time. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as fade-out time. Otherwise, this is returned for method chain.\n     */\n    fadeOut(time) {\n        if (time === undefined) {\n            return this.envelopegenerator.param('release');\n        }\n\n        this.envelopegenerator.param('release', time);\n\n        const startTime    = this.context.currentTime;\n        const currentTime  = this.param('currentTime');\n        const duration     = this.param('duration');\n        const playbackRate = this.param('playbackRate');\n\n        this.envelopegenerator.start(startTime);\n        this.envelopegenerator.stop((startTime + ((duration - currentTime) / playbackRate)), true);\n\n        return this;\n    }\n\n    /**\n     *  This method sprites audio.\n     *  @param {object} sprites This argument is the associative array that contains sprite times.\n     *  @return {object} This is returned as the associative array that contains sprited `AudioBuffer`.\n     */\n    sprite(sprites) {\n        if (!this.isBuffer()) {\n            return null;\n        }\n\n        if (Object.prototype.toString.call(sprites) !== '[object Object]') {\n            return null;\n        }\n\n        let dataLs = null;\n        let dataRs = null;\n\n        if (this.buffer.numberOfChannels > 0) {\n            dataLs = this.buffer.getChannelData(0);\n        }\n\n        if (this.buffer.numberOfChannels > 1) {\n            dataRs = this.buffer.getChannelData(1);\n        }\n\n        return Object.keys(sprites).reduce((audioBuffers, key) => {\n            const times = sprites[key];\n\n            if (!Array.isArray(times) || (times.length !== 2)) {\n                return;\n            }\n\n            const sampleRate = this.buffer.sampleRate;\n            const start      = parseInt((times[0] * sampleRate), 10);\n            const end        = parseInt((times[1] * sampleRate), 10);\n            const length     = end - start;\n\n            if (isNaN(length) || (length <= 0)) {\n                return null;\n            }\n\n            let spritedDataLs = null;\n            let spritedDataRs = null;\n            let buffer        = null;\n\n            switch (this.buffer.numberOfChannels) {\n                case 1:\n                    spritedDataLs = new Float32Array(length);\n\n                    for (let i = start; i < end; i++) {\n                        spritedDataLs[i - start] = dataLs[i];\n                    }\n\n                    buffer = this.context.createBuffer(1, length, sampleRate);\n\n                    buffer.copyToChannel(spritedDataLs, 0);\n\n                    audioBuffers[key] = buffer;\n\n                    return audioBuffers;\n                case 2:\n                    spritedDataLs = new Float32Array(length);\n                    spritedDataRs = new Float32Array(length);\n\n                    for (let i = start; i < end; i++) {\n                        spritedDataLs[i - start] = dataLs[i];\n                        spritedDataRs[i - start] = dataRs[i];\n                    }\n\n                    buffer = this.context.createBuffer(2, length, sampleRate);\n\n                    buffer.copyToChannel(spritedDataLs, 0);\n                    buffer.copyToChannel(spritedDataRs, 1);\n\n                    audioBuffers[key] = buffer;\n\n                    return audioBuffers;\n                default:\n                    return {};\n            }\n        }, {});\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport { AudioModule }  from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        this.envelopegenerator.setGenerator(0);\n        this.envelopegenerator.param({\n            'attack'  : 0,\n            'decay'   : 0.01,\n            'sustain' : 1,\n            'release' : 0.01\n        });\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        if (this.autoplay) {\n            this.stop(() => this.start(this.media.currentTime), () => {});\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n\n                        const startTime   = this.context.currentTime;\n                        const currentTime = this.param('currentTime');\n                        const duration    = this.param('duration');\n\n                        this.envelopegenerator.start(startTime);\n                        this.envelopegenerator.stop((startTime + ((duration - currentTime) / v)), true);\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n\n                            const startTime    = this.context.currentTime;\n                            const duration     = this.param('duration');\n                            const playbackRate = this.param('playbackRate');\n\n                            this.envelopegenerator.start(startTime);\n                            this.envelopegenerator.stop((startTime + ((duration - v) / playbackRate)), true);\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media && this.media.duration ? this.media.duration : 0;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1) || (this.ext === '')) {\n                this.media.src = src;  // `Data URL` or `Object URL` or Full path\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> GainNode (Envelope Generator) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.envelopegenerator.ready(0, this.source, this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const startTime = this.context.currentTime;\n\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.envelopegenerator.start(startTime);\n                this.envelopegenerator.stop((startTime + ((this.media.duration - pos) / this.media.playbackRate)), true);\n\n                this.on(startTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop(() => {\n                    if (this.autoplay) {\n                        this.media.muted  = this.muted = true;\n                        this.media.volume = 0;\n                    }\n\n                    this.start(position, connects, processCallback);\n                }, () => {\n                });\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @param {function} successCallback This argument is invoked when `HTMLMediaElement#play` is successful.\n     * @param {function} errorCallback This argument is invoked when `HTMLMediaElement#play` is failure.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop(successCallback, errorCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            // ref: https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\n            this.media.play()\n                .then(() => {\n                    this.media.pause();\n\n                    this.off(this.context.currentTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n\n                    if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                        successCallback();\n                    }\n\n                    return Promise.resolve();\n                })\n                .catch(error => {\n                    if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                        errorCallback(error);\n                    }\n\n                    return Promise.reject(error);\n                });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /**\n     * This method requests Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    requestPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media === document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return this.media.requestPictureInPicture();\n    }\n\n    /**\n     * This method exits from Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    exitPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media !== document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return document.exitPictureInPicture();\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { NoiseGate }  from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\nimport { AudioModule } from '../AudioModule';\nimport { MediaModule } from '../MediaModule';\nimport { StreamModule } from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\nexport class ProcessorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method sets the instance of `ScriptProcessorNode` or `AudioWorkletNode`.\n     * @param {ScriptProcessorNode|AudioWorkletNode} processor This argument is the instance of `ScriptProcessorNode` or `AudioWorkletNode`.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    setup(processor) {\n        if ((processor instanceof ScriptProcessorNode) || (processor instanceof AudioWorkletNode)) {\n            this.processor = processor;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts `onaudioprocess` event in the instance of `ScriptProcessorNode`.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    start(processCallback, connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    /**\n     * This method stops `onaudioprocess` event in the instance of `ScriptProcessorNode`.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessodNode`.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[ProcessorModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport class MML {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n    static FREQUENCY_RATIO   = Math.pow(2, (1 / 12));  // about 1.059463\n    static MIN_A             = 27.5;\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => (index >= 0) ? (MML.MIN_A * Math.pow(MML.FREQUENCY_RATIO, index)) : -1;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.offset = 0;\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @param {number} offset This argument is in order to correct the index of one-shot audio.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls, offset) {\n        this.offset = parseInt(offset, 10);\n\n        if (isNaN(this.offset) || (this.offset < 0)) {\n            this.offset = 0;\n        }\n\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop,\n                        'note'        : note\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                this.callbacks.start(sequence);\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n                this.callbacks.start(sequence);\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start((sequence.indexes[i] + this.offset), connects, processCallback);\n                    }\n                }\n\n                this.callbacks.start(sequence, this.offset);\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    this.callbacks.stop(sequence);\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n                    this.callbacks.stop(sequence);\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop((sequence.indexes[i] + this.offset), processCallback);\n                        }\n                    }\n\n                    this.callbacks.stop(sequence, this.offset);\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            this.callbacks.stop(sequence);\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n            this.callbacks.stop(sequence);\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop((index + this.offset), processCallback);\n                }\n            }\n\n            this.callbacks.stop(sequence, this.offset);\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method converts MML to ABC Notation.\n     * @param {string} mml This argument is MML string.\n     * @param {number} X This argument is file number in ABC Notation.\n     * @param {string} T This argument is title in ABC Notation.\n     * @param {string} M This argument is beat in ABC Notation.\n     * @param {string} L This argument is note duration in ABC Notation.\n     * @param {string} K This argument is tone in ABC Notation.\n     * @return {string} This is returned as ABC Notation.\n     */\n    toABC(mml, X, T, M, L, K) {\n        let abc = '';\n\n        abc += `X:${X ? X : 1}\\n`;\n        abc += `T:${T ? T : ''}\\n`;\n        abc += `M:${M ? M : '4/4'}\\n`;\n        abc += `L:${L ? L : '1/256'}\\n`;\n        abc += `K:${K ? K : ''}\\n`;\n\n        const notes = mml.match(MML.REGEXP_MML);\n\n        if (notes === null) {\n            return abc;\n        }\n\n        let octave        = null;\n        let totalDuration = 0;\n\n        while (notes.length > 0) {\n            const note = notes.shift().trim();\n\n            if (MML.REGEXP_TEMPO.test(note)) {\n                const Q = parseInt(note.slice(1), 10);\n\n                if (Q > 0) {\n                    abc += `Q:1/4=${Q}\\n`;\n                } else {\n                    return abc;\n                }\n            } else if (MML.REGEXP_OCTAVE.test(note)) {\n                octave = parseInt(note.slice(1), 10);\n\n                if (octave < 0) {\n                    return abc;\n                }\n            } else if (MML.REGEXP_NOTE.test(note)) {\n                if (octave === null) {\n                    return abc;\n                }\n\n                let splittedNotes = null;\n\n                if (note.indexOf('&') === -1) {\n                    splittedNotes = [note];\n                } else {\n                    splittedNotes = note.split('&');\n                }\n\n                let chord = '';\n\n                while (splittedNotes.length > 0) {\n                    const splittedNote = splittedNotes.shift();\n\n                    const duration = parseInt(splittedNote.replace(/^.+?(\\d+)\\.*$/, '$1'), 10);\n\n                    let n = '';\n                    let d = 0;\n\n                    switch (duration) {\n                        case 1:\n                            n = splittedNote.replace('1', '256');\n                            break;\n                        case 2:\n                            n = splittedNote.replace('2', '128');\n                            break;\n                        case 4:\n                            n = splittedNote.replace('4', '64');\n                            break;\n                        case 8:\n                            n = splittedNote.replace('8', '32');\n                            break;\n                        case 16:\n                            n = splittedNote.replace('16', '16');\n                            break;\n                        case 32:\n                            n = splittedNote.replace('32', '8');\n                            break;\n                        case 64:\n                            n = splittedNote.replace('64', '4');\n                            break;\n                        case 128:\n                            n = splittedNote.replace('128', '2');\n                            break;\n                        case 256:\n                            n = splittedNote.replace('256', '1');\n                            break;\n                        // Tuplet\n                        case 6:\n                            n = `(3${splittedNote.replace('6', '128')}`;\n                            d = 128 / 3;\n                            break;\n                        case 12:\n                            n = `(3${splittedNote.replace('12', '64')}`;\n                            d = 64 / 3;\n                            break;\n                        case 18:\n                            n = `(9${splittedNote.replace('18', '128')}`;\n                            d = 128 / 9;\n                            break;\n                        case 24:\n                            n = `(3${splittedNote.replace('24', '32')}`;\n                            d = 32 / 3;\n                            break;\n                        case 36:\n                            n = `(9${splittedNote.replace('36', '64')}`;\n                            d = 64 / 9;\n                            break;\n                        case 48:\n                            n = `(3${splittedNote.replace('48', '16')}`;\n                            d = 16 / 3;\n                            break;\n                        case 72:\n                            n = `(9${splittedNote.replace('72', '32')}`;\n                            d = 32 / 9;\n                            break;\n                        case 96:\n                            n = `(3${splittedNote.replace('96', '8')}`;\n                            d = 8 / 3;\n                            break;\n                        case 144:\n                            n = `(9${splittedNote.replace('144', '16')}`;\n                            d = 16 / 9;\n                            break;\n                        case 192:\n                            n = `(3${splittedNote.replace('192', '4')}`;\n                            d = 4 / 3;\n                            break;\n                        default:\n                            return abc;\n                    }\n\n                    if (n.indexOf('.') !== -1) {\n                        n = n.replace(/^(.+?)\\d+\\.+$/, `$1${1.5 * parseInt(n.replace(/^.+?(\\d+)\\.+$/, '$1'), 10)}`);\n                    }\n\n                    if (n.indexOf('(') === -1) {\n                        totalDuration += parseInt(n.replace(/^.+?(\\d+)\\.*$/i, '$1'), 10);\n                    } else {\n                        totalDuration += d;\n                    }\n\n                    if (totalDuration >= 256) {\n                        n += ' | ';\n                        totalDuration = 0;\n                    }\n\n                    if (/R/i.test(n)) {\n                        abc += `${n} `;\n                        continue;\n                    }\n\n                    let o = '';\n\n                    switch (octave) {\n                        case 0:\n                            o = ',,,,';\n                            break;\n                        case 1:\n                            o = ',,,';\n                            break;\n                        case 2:\n                            o = ',,';\n                            break;\n                        case 3:\n                            o = ',';\n                            break;\n                        case 5:\n                            o = '\\'';\n                            break;\n                        case 6:\n                            o = '\\'\\'';\n                            break;\n                        case 7:\n                            o = '\\'\\'\\'';\n                            break;\n                        case 4 :\n                        default:\n                            break;\n                    }\n\n                    const matches = n.match(/^(\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i);\n\n                    if (matches === null) {\n                        return abc;\n                    }\n\n                    const tuplet      = matches[1] ? matches[1] : '';\n                    const chordLength = matches[2].length;\n                    const restNote    = matches[3] ? matches[3] : '';\n\n                    let start = 0;\n\n                    if (tuplet.length > 0) {\n                        n = n.replace(/^(?:\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i, '$1$2');\n                    }\n\n                    if (chordLength === 1) {\n                        chord += `${tuplet}${n.slice(0, 1)}${o}${restNote}`;\n                    } else if ((chordLength === 2) && /[#+-]/.test(n.charAt(1))) {\n                        chord += `${tuplet}${n.slice(1, 2)}${n.slice(0, 1)}${o}${restNote}`;\n                    } else {\n                        while (start < chordLength) {\n                            if (start === 0) {\n                                chord += `${tuplet}[`;\n                            }\n\n                            if (/[#+-]/.test(n.charAt(start + 1))) {\n                                chord += `${n.slice((start + 1), (start + 2))}${n.slice(start, (start + 1))}${o}`;\n                                start += 2;\n                            } else {\n                                chord += `${n.slice(start, (start + 1))}${o}`;\n                                start++;\n                            }\n\n                            if (start === chordLength) {\n                                chord += `]${restNote}`;\n                            }\n                        }\n                    }\n\n                    if (splittedNotes.length > 0) {\n                        chord += '&';\n                    } else {\n                        abc += `${chord} `;\n                    }\n                }\n            }\n        }\n\n        return abc.replace(/R/gi, 'z')\n                  .replace(/[#+]/g, '^')\n                  .replace(/-/g, '_')\n                  .replace(/&/g, '-')\n                  .replace(/\\s{2}/g, ' ');\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {type} string This argument is response type that is one of 'text', 'arraybuffer', 'blob', 'document', 'json'. The default value is 'arraybuffer'.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, type, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if ((xhr.status === 200) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n            successCallback(event, xhr.response);\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = /text|arraybuffer|blob|document|json/.test(String(type).toLowerCase()) ? String(type).toLowerCase() : 'arraybuffer';\n    xhr.send(null);\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function exitFullscreen() {\n    if (document.exitFullscreen) {\n        return document.exitFullscreen();\n    }\n\n    if (document.webkitCancelFullScreen) {\n        return document.webkitCancelFullScreen();\n    }\n\n    if (document.mozCancelFullScreen) {\n        return document.mozCancelFullScreen();\n    }\n\n    if (document.msExitFullscreen) {\n        return document.msExitFullscreen();\n    }\n\n    if (document.cancelFullScreen) {\n        return document.cancelFullScreen();\n    }\n\n    return Promise.reject('Cannot exit from full screen.');\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'ObjectURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File|ObjectURL} This is returned as the instance of `File` (extends `Blob`) or Object URL.\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        if (/objecturl/i.test(type)) {\n            window.URL = window.URL || window.webkitURL || window.mozURL;\n            return window.URL.createObjectURL(file);\n        }\n\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function requestFullscreen(element) {\n    if (!(element instanceof Element)) {\n        return Promise.reject('Invalid argument.');\n    }\n\n    if (element.requestFullscreen) {\n        return element.requestFullscreen();\n    }\n\n    if (element.webkitRequestFullscreen) {\n        return element.webkitRequestFullscreen();\n    }\n\n    if (element.mozRequestFullScreen) {\n        return element.mozRequestFullScreen();\n    }\n\n    if (element.msRequestFullscreen) {\n        return element.msRequestFullscreen();\n    }\n\n    return Promise.reject('Cannot change to full screen.');\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method creates text file.\n * @param {string} text This argument is string.\n * @return {string} This is returned as text file.\n */\nexport function toTextFile(text) {\n    /**\n     * This function converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    const toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    const base64  = window.btoa(toAscii(String(text)));\n    const dataURL = `data:text/plain;base64,${base64}`;\n\n    return dataURL;\n}\n","'use strict';\n\nimport { SoundModule } from './SoundModule';\nimport { OscillatorModule } from './OscillatorModule';\nimport { OneshotModule } from './OneshotModule';\nimport { NoiseModule } from './NoiseModule';\nimport { AudioModule } from './AudioModule';\nimport { MediaModule } from './MediaModule';\nimport { StreamModule } from './StreamModule';\nimport { MixerModule } from './MixerModule';\nimport { ProcessorModule} from './ProcessorModule';\nimport { MIDI } from './MIDI';\nimport { MML } from './MML';\nimport { Effector } from './SoundModule/Effectors/Effector';\nimport {\n    ajax,\n    convertTime,\n    decode,\n    exitFullscreen,\n    file,\n    requestFullscreen,\n    read,\n    toFrequencies,\n    toTextFile\n} from './XSound';\n\nconst global = (typeof window !== 'undefined') ? window : {};\n\nglobal.AudioContext = global.AudioContext || global.webkitAudioContext;\n\nlet XSound;\n\nconst IS_XSOUND = Boolean(global.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'noise'      : new NoiseModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'processor'  : new ProcessorModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `NoiseModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `ProcessorModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'noise', 'audio', 'media', 'stream', 'mixer', 'processor', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|NoiseModule|AudioModule|MediaModule|StreamModule|MixerModule|ProcessorModule|MIDI|MML|Oscillator}\n     */\n    XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot'  :\n            case 'noise'    :\n            case 'audio'    :\n            case 'media'    :\n            case 'stream'   :\n            case 'mixer'    :\n            case 'processor':\n            case 'midi'     :\n            case 'mml'      :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.ajax              = ajax;\n    XSound.convertTime       = convertTime;\n    XSound.decode            = decode;\n    XSound.exitFullscreen    = exitFullscreen;\n    XSound.file              = file;\n    XSound.requestFullscreen = requestFullscreen;\n    XSound.read              = read;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.toTextFile        = toTextFile;\n\n    XSound.Effector = Effector;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'noise'      : new NoiseModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'processor'  : new ProcessorModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot'  :\n                case 'noise'    :\n                case 'audio'    :\n                case 'media'    :\n                case 'stream'   :\n                case 'mixer'    :\n                case 'processor':\n                case 'midi'     :\n                case 'mml'      :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Autoplay Policy\n    const setup = () => {\n        XSound.setup().then(() => {}).catch(() => {});\n\n        document.removeEventListener('click',      setup, true);\n        document.removeEventListener('mousedown',  setup, true);\n        document.removeEventListener('mouseup',    setup, true);\n        document.removeEventListener('touchstart', setup, true);\n        document.removeEventListener('touchend',   setup, true);\n    };\n\n    document.addEventListener('click',      setup, true);\n    document.addEventListener('mousedown',  setup, true);\n    document.addEventListener('mouseup',    setup, true);\n    document.addEventListener('touchstart', setup, true);\n    document.addEventListener('touchend',   setup, true);\n\n} else {\n    XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n}\n\n// for `<script>`\nglobal.XSound = XSound;\nglobal.X      = XSound;  // Alias of `XSound`\n\n// for ESModules and SSR (Server Side Rendering)\nif (typeof exports !== 'undefined') {\n    exports.XSound = XSound;\n    exports.X      = XSound;  // Alias of `XSound`\n}\n"],"sourceRoot":""}