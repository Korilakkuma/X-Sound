{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Effectors/Effector.js","webpack:///./src/SoundModule/Effectors/Compressor.js","webpack:///./src/SoundModule/Effectors/Distortion.js","webpack:///./src/SoundModule/Effectors/Wah.js","webpack:///./src/SoundModule/Effectors/PitchShifter.js","webpack:///./src/SoundModule/Effectors/Equalizer.js","webpack:///./src/SoundModule/Effectors/Filter.js","webpack:///./src/SoundModule/Effectors/Autopanner.js","webpack:///./src/SoundModule/Effectors/AutopannerFallback.js","webpack:///./src/SoundModule/Effectors/Tremolo.js","webpack:///./src/SoundModule/Effectors/Ringmodulator.js","webpack:///./src/SoundModule/Effectors/Phaser.js","webpack:///./src/SoundModule/Effectors/Flanger.js","webpack:///./src/SoundModule/Effectors/Chorus.js","webpack:///./src/SoundModule/Effectors/Delay.js","webpack:///./src/SoundModule/Effectors/Reverb.js","webpack:///./src/SoundModule/Effectors/Panner.js","webpack:///./src/SoundModule/Effectors/Listener.js","webpack:///./src/SoundModule/Effectors/EnvelopeGenerator.js","webpack:///./src/SoundModule/index.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/NoiseModule/index.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/ProcessorModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visualizer","constructor","sampleRate","this","isActive","graphics","canvas","context","svg","interval","timerid","styles","setup","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","param","k","String","replace","toLowerCase","v","undefined","parseFloat","shape","wave","grad","Array","isArray","isError","grads","offset","isNaN","toString","prop","test","font","parseInt","start","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","state","Boolean","drawTimeDomainFloat32ArrayOnCanvas","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","width","lineCap","cap","lineJoin","join","beginPath","len","length","x","left","y","top","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","gradients","addColorStop","color","fillRect","drawTimeDomainFloat32ArrayBySVG","linearGradientId","path","document","createElementNS","XMLNS","setAttribute","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","stop","createFontString","size","style","family","clear","height","clearRect","innerHTML","TimeOverview","super","savedImage","currentTime","sprite","plotInterval","textInterval","isDown","DRAG_MODE_UPDATE","offsetX","startTime","endTime","arguments","DRAG_MODE_SPRITE","querySelector","SVG_SPRITE_CLASS_NAME","removeChild","right","bottom","Math","floor","nTextInterval","grid","text","fillText","measureText","texts","trim","getImageData","getAttribute","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","textContent","weight","classList","add","SVG_CURRENT_TIME_CLASS_NAME","update","time","ImageData","putImageData","baseX","abs","baseRect","lastElementChild","previousElementSibling","drag","callback","drawNode","move","end","navigator","userAgent","onStart","onMove","onEnd","removeEventListener","window","addEventListener","draw","event","type","offsetLeft","parentNode","getOffsetX","preventDefault","pageX","touches","Time","UINT","FLOAT","ceil","SVG_LINEAR_GRADIENT_ID_TIME","FFT","min","max","mindB","maxdB","range","drawnSize","fsDivN","f","slice","SVG_LINEAR_GRADIENT_ID_FFT","Analyser","analyser","createAnalyser","input","createGain","connect","timeOverviewL","timeOverviewR","fft","fftSize","smoothingTimeConstant","frequencyBinCount","domain","buffer","AudioBuffer","numberOfChannels","set","getChannelData","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","requestAnimationFrame","setTimeout","getByteFrequencyData","getFloatFrequencyData","cancelAnimationFrame","clearTimeout","toUpperCase","Recorder","bufferSize","numberOfInputs","numberOfOutputs","processor","createScriptProcessor","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","paused","gainL","gainR","ready","track","isTrack","onaudioprocess","inputLs","inputBuffer","inputRs","recordedLs","recordedRs","push","disconnect","getActiveTrack","flatTrack","channel","tracks","flattenTrack","j","mixTrack","mixes","currentBuffer","index","numberOfMaxBuffers","values","currentTrack","sum","num","mix","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","fromCharCode","base64","btoa","waves","blob","Blob","URL","createObjectURL","Session","sender","BUFFER_SIZE","receiver","websocket","tls","host","port","openCallback","closeCallback","errorCallback","properties","open","close","error","scheme","charAt","WebSocket","binaryType","onopen","onclose","onerror","onmessage","ArrayBuffer","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","outputLs","outputBuffer","outputRs","destination","isConnected","bufferedAmount","send","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Effector","output","lfo","createOscillator","depth","rate","frequency","noteOn","noteOff","isStop","stopTime","releaseTime","params","toJSON","JSON","stringify","Compressor","compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion","distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","amount","numberOfSamples","gain","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","curves","a","abx","exp","Wah","autoWah","lowpass","envelopeFollower","sensitivity","depthRate","PitchShifter","reals","imags","pow2","indexes","numberOfStages","log2","stage","rest","areal","aimag","breal","bimag","creal","cos","PI","cimag","sin","real","imag","pitch","realLs","realRs","imagLs","imagRs","arealLs","arealRs","aimagLs","aimagRs","eq","IFFT","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","Autopanner","panner","createStereoPanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPES","Ringmodulator","Phaser","filters","MAXIMUM_STAGES","ALLPASS","feedback","Flanger","delay","createDelay","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","successCallback","decodeAudioData","preset","timeout","progressCallback","success","progress","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogresss","abort","ERROR_AJAX","onload","status","arrayBuffer","response","decodeSuccessCallback","audioBuffer","decodeErrorCallback","ERROR_DECODE","responseType","Panner","createPanner","positions","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","positionX","AudioParam","positionY","positionZ","z","setPosition","orientationX","orientationY","orientationZ","setOrientation","PANNING_MODELS","DISTANCE_MODELS","Listener","listener","forwards","ups","forwardX","forwardY","forwardZ","upX","upY","upZ","EnvelopeGenerator","generators","activeIndexes","activeCounter","AudioNode","activeIndex","useCurve","setValueCurveAtTime","getGenerator","setGenerator","counter","MIN_GAIN","isDisconnect","generator","SoundModule","init","mastervolume","recorder","session","forEach","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","wah","pitchshifter","equalizer","autopanner","tremolo","ringmodulator","phaser","flanger","chorus","reverb","envelopegenerator","resize","getBufferSize","install","effector","every","source","connects","on","off","Oscillator","setPeriodicWave","setWaveTable","volume","octave","fine","customs","MAX_SIZE","subarray","periodicWave","createPeriodicWave","OCTAVE","detune","Glide","frequencies","LINEAR","EXPONENTIAL","diff","oscillator","OscillatorModule","sources","times","isAnalyser","glide","states","st","sp","processCallback","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","loop","onprogress","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","onended","oneshot","reset","NoiseModule","WHITE_NOISE","PINK_NOISE","BROWNIAN_NOISE","lastOut","random","b0","b1","b2","b3","b4","b5","b6","white","VocalCanceler","dataL","dataR","AudioModule","callbacks","vocalcanceler","duration","decode","toggle","ended","isBuffer","isSource","isPaused","fadeIn","fadeOut","sprites","dataLs","dataRs","keys","reduce","audioBuffers","spritedDataLs","spritedDataRs","createBuffer","copyToChannel","audio","MediaModule","media","ext","mse","sb","file","mimeType","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","src","resume","then","catch","Error","loadstart","pause","HTMLMediaElement","isFinite","channelCount","endOfStream","revokeObjectURL","onSourceOpen","onSourceEnded","onSourceClose","onSourceBufferUpdateEnd","onSourceBufferError","MediaSource","isTypeSupported","removeAttribute","indexOf","message","position","play","pos","Promise","resolve","reject","isMedia","addSourceBuffer","sourceopen","request","Request","fetch","appendBuffer","sourceended","sourceclose","updateend","requestPictureInPicture","pictureInPictureEnabled","disablePictureInPicture","pictureInPictureElement","exitPictureInPicture","NoiseGate","level","StreamModule","constraints","noisegate","streamCallback","stream","mediaDevices","getUserMedia","createMediaStreamSource","isStreaming","MixerModule","ProcessorModule","ScriptProcessorNode","AudioWorkletNode","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","next","done","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","node","isSequences","toABC","mml","X","T","M","L","K","abc","totalDuration","splittedNotes","splittedNote","matches","tuplet","chordLength","restNote","read","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","computedIndex","MIN_A","FREQUENCY_RATIO","global","XSound","AudioContext","webkitAudioContext","WebkitMediaSource","webkitURL","mozURL","webkitRequestAnimationFrame","mozRequestAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","SAMPLE_RATE","ajax","convertTime","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","Event","stopPropagation","dataTransfer","files","target","File","requestFullscreen","Element","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","toFrequencies","toTextFile","string","converted","charCode","charCodeAt","toAscii","clone","clones","C","free","sourceList","noConflict","deep","getCurrentTime"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            // this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            // this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/(?:family|size|style)/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) { w = 0; }\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(m)) { m = 0; }\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = -1 * (data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) { w = 0; }\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(m)) { m = 0; }\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = data[i] * (innerHeight / 2);\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, family } = this.styles.font;\n\n        return `${style} ${size} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /**\n     * This method clears graphics.\n     */\n    clear() {\n        if (this.context) {\n            const { width, height } = this.canvas;\n\n            this.context.clearRect(0, 0, width, height);\n        }\n\n        if (this.svg) {\n            this.svg.innerHTML = '';\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class TimeOverview extends Visualizer {\n    static SVG_CURRENT_TIME_CLASS_NAME = 'xsound-svg-current-time';\n    static SVG_SPRITE_CLASS_NAME       = 'xsound-svg-sprite';\n    static DRAG_MODE_UPDATE = 'update';\n    static DRAG_MODE_SPRITE = 'sprite';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(0, 0, 0, 0.5)';         // This style is used for the rectangle that displays current time of audio\n        this.sprite       = 'rgba(255, 255, 255, 0.25)';  // This style is used for the rectangle that displays sprite range\n        this.plotInterval = 0.0625;                       // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                           // Draw text at intervals of this value [sec]\n\n        this.isDown = false;\n\n        this.mode = TimeOverview.DRAG_MODE_UPDATE;  // or 'sprite'\n\n        // for Audio Sprite\n        this.offsetX   = 0;\n        this.startTime = 0;\n        this.endTime   = 0;\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'sprite':\n                    if (value === undefined) {\n                        return this.sprite;\n                    }\n\n                    this.sprite = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                case 'mode':\n                    if (value === undefined) {\n                        return this.mode;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === TimeOverview.DRAG_MODE_UPDATE) || (v === TimeOverview.DRAG_MODE_SPRITE)) {\n                        this.mode = v;\n\n                        // Clear for Audio Sprite\n                        this.offsetX   = 0;\n                        this.startTime = 0;\n                        this.endTime   = 0;\n\n                        if (this.svg instanceof SVGElement) {\n                            const rect = this.svg.querySelector(`.${TimeOverview.SVG_SPRITE_CLASS_NAME}`);\n\n                            if (rect instanceof SVGElement) {\n                                this.svg.removeChild(rect);\n                            }\n                        }\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add(TimeOverview.SVG_CURRENT_TIME_CLASS_NAME);\n\n        rect.setAttribute('y', (this.styles.top + 1));\n        rect.setAttribute('height', (innerHeight - 1));\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill', this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n                        context.fillStyle = this.currentTime;\n                        context.fillRect(this.styles.left, (this.styles.top + 1), x, (innerHeight - 1));\n                    } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n                        if (this.endTime !== 0) {\n                            const baseX = Math.floor(((Math.abs(this.endTime - this.startTime) * this.sampleRate) / this.length) * innerWidth);\n                            context.fillStyle = this.sprite;\n\n                            if (x >= this.offsetX) {\n                                context.fillRect((this.styles.left + this.offsetX), (this.styles.top + 1), baseX, (innerHeight - 1));\n                            } else {\n                                context.fillRect((this.styles.left + this.offsetX - baseX), (this.styles.top + 1), baseX, (innerHeight - 1));\n                            }\n                        }\n\n                        context.fillStyle = this.currentTime;\n\n                        if (x >= this.offsetX) {\n                            context.fillRect((this.styles.left + this.offsetX), (this.styles.top + 1), Math.abs(x - this.offsetX), (innerHeight - 1));\n                        } else {\n                            context.fillRect((this.styles.left + x), (this.styles.top + 1), Math.abs(x - this.offsetX), (innerHeight - 1));\n                        }\n                    }\n                }\n\n                break;\n            case Visualizer.SVG:\n                const rect = this.svg.querySelector(`.${TimeOverview.SVG_CURRENT_TIME_CLASS_NAME}`);\n\n                if (rect instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = ((t * this.sampleRate) / this.length) * innerWidth;\n\n                    if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n                        rect.setAttribute('x', this.styles.left);\n                        rect.setAttribute('width', x);\n                        // rect.setAttribute('transform', `translate(${x} 0)`);\n                        rect.setAttribute('aria-label', 'current time');\n                    } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n                        if (this.endTime !== 0) {\n                            const baseRect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            baseRect.classList.add(TimeOverview.SVG_SPRITE_CLASS_NAME);\n\n                            if (this.svg.lastElementChild.previousElementSibling instanceof SVGElement) {\n                                this.svg.removeChild(this.svg.lastElementChild.previousElementSibling);\n                            }\n\n                            const baseX = Math.floor(((Math.abs(this.endTime - this.startTime) * this.sampleRate) / this.length) * innerWidth);\n\n                            baseRect.setAttribute('y', (this.styles.top + 1));\n                            baseRect.setAttribute('height', rect.getAttribute('height'));\n                            baseRect.setAttribute('stroke', 'none');\n                            baseRect.setAttribute('fill', this.sprite);\n                            baseRect.setAttribute('aria-label', 'current time');\n\n                            if (x >= this.offsetX) {\n                                baseRect.setAttribute('x', (this.styles.left + this.offsetX));\n                            } else {\n                                baseRect.setAttribute('x', (this.styles.left + this.offsetX - baseX));\n                            }\n\n                            baseRect.setAttribute('width', baseX);\n\n                            this.svg.appendChild(baseRect);\n                            this.svg.appendChild(rect);\n                        }\n\n                        if (x >= this.offsetX) {\n                            rect.setAttribute('x', (this.styles.left + this.offsetX));\n                        } else {\n                            rect.setAttribute('x', (this.styles.left + x));\n                        }\n\n                        rect.setAttribute('width', Math.abs(x - this.offsetX));\n                        rect.setAttribute('aria-label', 'sprite time');\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        this.callback = Object.prototype.toString.call(callback) === '[object Function]' ? callback : () => {};\n\n        this.onStart = this.onStart.bind(this);\n        this.onMove  = this.onMove.bind(this);\n        this.onEnd   = this.onEnd.bind(this);\n\n        drawNode.removeEventListener(start, this.onStart, true);\n        drawNode.removeEventListener(move, this.onMove, true);\n        window.removeEventListener(end, this.onEnd, true);\n\n        drawNode.addEventListener(start, this.onStart, true);\n        drawNode.addEventListener(move, this.onMove, true);\n        window.addEventListener(end, this.onEnd, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(event, type, offsetX) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     { x = 0; }\n        if (x > width) { x = width; }\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        if ((this.mode === TimeOverview.DRAG_MODE_SPRITE) && ((type === 'mousedown') || (type === 'touchstart'))) {\n            this.offsetX   = x;\n            this.startTime = time;\n            this.endTime   = 0;\n        }\n\n        if ((this.mode === TimeOverview.DRAG_MODE_SPRITE) && ((type === 'mouseup') || (type === 'touchend'))) {\n            this.endTime = time;\n        }\n\n        this.update(time);\n\n        if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n            this.callback(event, time);\n        } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n            if (this.startTime < time) {\n                this.callback(event, this.startTime, time);\n            } else if (this.startTime > time) {\n                this.callback(event, time, this.startTime);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onStart(event) {\n        this.draw(event, event.type, this.getOffsetX(event));\n        this.isDown = true;\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onMove(event) {\n        if (!this.isDown) {\n            return;\n        }\n\n        event.preventDefault();  // for Touch Panel\n        this.draw(event, event.type, this.getOffsetX(event));\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onEnd(event) {\n        if (!this.isDown) {\n            return;\n        }\n\n        this.draw(event, event.type, this.getOffsetX(event));\n\n        this.isDown = false;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                        // Set style\n                        if (this.styles.wave !== 'gradient') {\n                            context.fillStyle = this.styles.wave;\n                        }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = (0.5 - (data[i] / 255)) * innerHeight;\n\n                            // Set style\n                            if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((data[i] / 255) - 0.5) * innerHeight;\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                        // Set style\n                        if (this.styles.wave !== 'gradient') {\n                            context.fillStyle = this.styles.wave;\n                        }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * ((data[i] / 255) * innerHeight);\n\n                            // Set style\n                            if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport { TimeOverview } from './TimeOverview';\nimport { Time } from './Time';\nimport { FFT } from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) { this.trackLs[i] = []; }  // n x array\n            for (let i = 0; i < n; i++) { this.trackRs[i] = []; }  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method flats recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @param {number} track This argument is track number.\n     * @return {Float32Array} This is returned as array for flatten sound.\n     */\n    flatTrack(channel, track) {\n        if (!this.isTrack(track)) {\n            return null;\n        }\n\n        const tracks     = this[`track${channel}s`][track];\n        const bufferSize = this.processor.bufferSize;\n\n        const flattenTrack = new Float32Array(tracks.length * bufferSize);\n\n        for (let i = 0, len = tracks.length; i < len; i++) {\n            for (let j = 0; j < bufferSize; j++) {\n                flattenTrack[(i * bufferSize) + j] = tracks[i][j];\n            }\n        }\n\n        return flattenTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) { track.length = 0; }\n            for (const track of this.trackRs) { track.length = 0; }\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @param {string} type This argument is one of 'blob', 'objecturl', 'base64', 'dataurl'.\n     * @return {Blob|string} This is returned as `Blob` or Object URL or Base64 or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit, type) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else if (this.isTrack(track)) {\n            soundLs = this.flatTrack('L', track);\n            soundRs = this.flatTrack('R', track);\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) { binary = (Math.pow(2, 8) - 1); }\n                    if (binary < (Math.pow(2, 0) - 1)) { binary = (Math.pow(2, 0) - 1); }\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) { binary =  Math.pow(2, 15) - 1; }\n                    if (binary < (-Math.pow(2, 15) - 1)) { binary = -Math.pow(2, 15) - 1; }\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        const t = String(type).toLowerCase();\n\n        switch (t) {\n            case 'base64' :\n            case 'dataurl':\n                let wave = '';\n\n                wave += 'RIFF';\n                wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n                wave += 'WAVE';\n\n                // fmt chunk\n                wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n                wave += String.fromCharCode(1, 0);\n\n                // fmt chunk -> Channels (Monaural or Stereo)\n                wave += String.fromCharCode(CHANNEL, 0);\n\n                // fmt chunk -> Sample rate\n                wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n                // fmt chunk -> Byte per second\n                wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n                // fmt chunk -> Block size\n                wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n                // fmt chunk -> Byte per Sample\n                wave += String.fromCharCode(QBIT, 0);\n\n                // data chunk\n                wave += 'data';\n                wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n                for (let i = 0; i < SIZE; i++) {\n                    switch (QBIT) {\n                        case  8:\n                            wave += String.fromCharCode(sounds[i]);\n                            break;\n                        case 16:\n                            // The byte order in WAVE file is little endian\n                            wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                const base64 = window.btoa(wave);\n\n                if (t === 'base64') {\n                    return base64;\n                }\n\n                return `data:audio/wav;base64,${base64}`;\n            case 'blob'     :\n            case 'objecturl':\n            default         :\n                const waves = [];\n\n                waves[0] = 0x52;  // 'R'\n                waves[1] = 0x49;  // 'I'\n                waves[2] = 0x46;  // 'F'\n                waves[3] = 0x46;  // 'F'\n\n                waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n                waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n                waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n                waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n                waves[8]  = 0x57;  // 'W'\n                waves[9]  = 0x41;  // 'A'\n                waves[10] = 0x56;  // 'V'\n                waves[11] = 0x45;  // 'E'\n\n                // fmt chunk\n                waves[12] = 0x66;  // 'f'\n                waves[13] = 0x6D;  // 'm'\n                waves[14] = 0x74;  // 't'\n                waves[15] = 0x20;  // ' '\n\n                waves[16] = 16;\n                waves[17] =  0;\n                waves[18] =  0;\n                waves[19] =  0;\n\n                waves[20] = 1;\n                waves[21] = 0;\n\n                // fmt chunk -> Channels (Monaural or Stereo)\n                waves[22] = CHANNEL;\n                waves[23] = 0;\n\n                // fmt chunk -> Sample rate\n                waves[24] = (RATE >>  0) & 0xFF;\n                waves[25] = (RATE >>  8) & 0xFF;\n                waves[26] = (RATE >> 16) & 0xFF;\n                waves[27] = (RATE >> 24) & 0xFF;\n\n                // fmt chunk -> Byte per second\n                waves[28] = (BPS >>  0) & 0xFF;\n                waves[29] = (BPS >>  8) & 0xFF;\n                waves[30] = (BPS >> 16) & 0xFF;\n                waves[31] = (BPS >> 24) & 0xFF;\n\n                // fmt chunk -> Block size\n                waves[32] = CHANNEL * (QBIT / 8);\n                waves[33] = 0;\n\n                // fmt chunk -> Byte per Sample\n                waves[34] = QBIT;\n                waves[35] = 0;\n\n                // data chunk\n                waves[36] = 0x64;  // 'd'\n                waves[37] = 0x61;  // 'a'\n                waves[38] = 0x74;  // 't\n                waves[39] = 0x61;  // 'a'\n\n                waves[40] = (DATA_SIZE >>  0) & 0xFF;\n                waves[41] = (DATA_SIZE >>  8) & 0xFF;\n                waves[42] = (DATA_SIZE >> 16) & 0xFF;\n                waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n                for (let i = 0; i < SIZE; i++) {\n                    switch (QBIT) {\n                        case  8:\n                            waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                            break;\n                        case 16:\n                            // The byte order in WAVE file is little endian\n                            waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                            waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                const blob = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n\n                if (t === 'blob') {\n                    return blob;\n                }\n\n                return window.URL.createObjectURL(blob);\n        }\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport class Session {\n    static BUFFER_SIZE = 2048;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        // HACK: Fix buffer size on different environments\n        this.sender   = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) { outputLs.set(bufferLs); }\n                    if (bufferRs instanceof Float32Array) { outputRs.set(bufferRs); }\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 2, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n        return this;\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @return {Effector} This is returned for method chain.\n     * @abstract\n     */\n    connect() {\n        return this;\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n            // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {string} type This argument is one of 'clean', 'crunch', 'overdrive', 'distortion', 'fuzz'.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (type, amount, numberOfSamples) => {\n        // This algorithms are from https://github.com/Theodeus/tuna/blob/master/tuna.js#L1301,L1359\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            let x   = 0;\n            let y   = 0;\n            let a   = 0;\n            let k   = 0;\n            let abx = 0;\n\n            switch (type) {\n                case Distortion.CRUNCH:\n                    a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        x = i * 2 / numberOfSamples - 1;\n                        abx = Math.abs(x);\n\n                        if (abx < a) {\n                            y = abx;\n                        } else if (abx > a) {\n                            y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n                        } else if (abx > 1) {\n                            y = abx;\n                        }\n\n                        curves[i] = (x === 0 ? 1 : Math.abs(x) / x) * y * (1 / ((a + 1) / 2));\n                    }\n\n                    /*\n                    const a    = 2 + Math.round(amount * 14);\n                    const bits = Math.round(Math.pow(2, a - 1));\n\n                    let x = 0;\n\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        x = i * 2 / numberOfSamples - 1;\n                        curves[i] = Math.round(x * bits) / bits;\n                    }\n                    */\n\n                    break;\n                case Distortion.OVERDRIVE:\n                    k = (2 * amount) / (1 - amount);\n\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                        // a = 0, b = 2048, z = 1, y = -1, c = i\n                        const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                        curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n                    }\n\n                    /*\n                    let x = 0;\n\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        x = i * 2 / numberOfSamples - 1;\n\n                        if (x < -0.08905) {\n                            curves[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\n                        } else if (x >= -0.08905 && x < 0.320018) {\n                            curves[i] = (-6.153 * (x * x)) + 3.9375 * x;\n                        } else {\n                            curves[i] = 0.630035;\n                        }\n                    }\n                    */\n\n                    break;\n                case Distortion.DISTORTION:\n                    a = 1 - amount;\n\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        x = i * 2 / numberOfSamples - 1;\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n                        curves[i] = (Math.exp(2 * y) - Math.exp(-2 * y)) / (Math.exp(2 * y) + Math.exp(-2 * y));\n                    }\n\n                    break;\n                case Distortion.FUZZ:\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        x = ((i * 2) / numberOfSamples) - 1;\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n\n                        curves[i] = (Math.exp(y) - Math.exp(-y)) / (Math.exp(y) + Math.exp(-y));\n                    }\n\n                    break;\n                case Distortion.CLEAN:\n                default:\n                    return null;\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.amount          = 0.5;\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.CLEAN, this.amount, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.CRUNCH, this.amount, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.OVERDRIVE, this.amount, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.DISTORTION, this.amount, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.FUZZ, this.amount, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'amount':\n                    if (value === undefined) {\n                        return this.amount;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v > 0) && (v < 1)) {\n                        this.amount = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 100;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.color.disconnect(0);\n        this.drive.disconnect(0);\n        this.distortion.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.drive);\n            this.drive.connect(this.distortion);\n            this.distortion.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'amount'  : this.amount,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport { Effector }  from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.autoWah = false;\n\n        this.lowpass          = context.createBiquadFilter();\n        this.envelopeFollower = context.createWaveShaper();\n        this.sensitivity      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = this.autoWah ? 20 : 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.envelopeFollower.curve = new Float32Array([1, 0, 1]);\n\n        this.sensitivity.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.sensitivity.frequency.value = 350;\n        this.sensitivity.Q.value         = 1;\n        this.sensitivity.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n        this.connect();\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'auto':\n                    if (value === undefined) {\n                        return this.autoWah;\n                    }\n\n                    this.autoWah = Boolean(value);\n                    this.connect();\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.autoWah ? this.sensitivity.frequency.value : this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        if (this.autoWah) {\n                            this.sensitivity.frequency.value = v;\n                            this.lowpass.frequency.value     = 20;\n                        } else {\n                            this.lowpass.frequency.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.autoWah ? 10000 * v : this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.autoWah ? this.sensitivity.Q.value : this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        if (this.autoWah) {\n                            this.sensitivity.Q.value = v;\n                            this.lowpass.Q.value     = 1;\n                        } else {\n                            this.lowpass.Q.value = v;\n                        }\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (!this.autoWah && this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.sensitivity.disconnect(0);\n        this.envelopeFollower.disconnect(0);\n        this.lowpass.disconnect(0);\n        this.depth.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            if (this.autoWah) {\n                // GainNode (Input) -> BiquadFilterNode (Sensitivity) -> GainNode (Output)\n                this.input.connect(this.sensitivity);\n                this.sensitivity.connect(this.output);\n\n                // WaveShaperNode (Envelope Follower) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Depth) -> AudioParam (frequency)\n                this.input.connect(this.envelopeFollower);\n                this.envelopeFollower.connect(this.lowpass);\n                this.lowpass.connect(this.depth);\n                this.depth.connect(this.sensitivity.frequency);\n            } else {\n                // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n                this.input.connect(this.lowpass);\n                this.lowpass.connect(this.output);\n\n                // LFO\n                // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n                this.lfo.connect(this.depth);\n                this.depth.connect(this.lowpass.frequency);\n            }\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'auto'      : this.autoWah,\n            'cutoff'    : this.autoWah ? this.sensitivity.frequency.value : this.lowpass.frequency.value,\n            'depth'     : this.autoWah ? this.depth.gain.value : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.autoWah ? this.sensitivity.Q.value : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class PitchShifter extends Effector {\n    /**\n     * This class (static) method executes FFT.\n     * @param {Float32Array} reals This argument is the instance of `Float32Array` for real number.\n     * @param {Float32Array} imags This argument is the instance of `Float32Array` for imaginary number.\n     * @param {number} size This argument is FFT size (power of two).\n     */\n    static FFT(reals, imags, size) {\n        const pow2 = n => Math.pow(2, n);\n\n        const indexes = new Float32Array(size);\n\n        const numberOfStages = Math.log2(size);\n\n        for (let stage = 1; stage <= numberOfStages; stage++) {\n            for (let i = 0; i < pow2(stage - 1); i++) {\n                const rest = numberOfStages - stage;\n\n                for (let j = 0; j < pow2(rest); j++) {\n                    const n = i * pow2(rest + 1) + j;\n                    const m = pow2(rest) + n;\n                    const r = j * pow2(stage - 1);\n\n                    const areal = reals[n];\n                    const aimag = imags[n];\n                    const breal = reals[m];\n                    const bimag = imags[m];\n                    const creal = Math.cos((2.0 * Math.PI * r) / size);\n                    const cimag = -1 * Math.sin((2.0 * Math.PI * r) / size);\n\n                    if (stage < numberOfStages) {\n                        reals[n] = areal + breal;\n                        imags[n] = aimag + bimag;\n                        reals[m] = (creal * (areal - breal)) - (cimag * (aimag - bimag));\n                        imags[m] = (creal * (aimag - bimag)) + (cimag * (areal - breal));\n                    } else {\n                        reals[n] = areal + breal;\n                        imags[n] = aimag + bimag;\n                        reals[m] = areal - breal;\n                        imags[m] = aimag - bimag;\n                    }\n                }\n            }\n        }\n\n        for (let stage = 1; stage <= numberOfStages; stage++) {\n            const rest = numberOfStages - stage;\n\n            for (let i = 0; i < pow2(stage - 1); i++) {\n                indexes[pow2(stage - 1) + i] = indexes[i] + pow2(rest);\n            }\n        }\n\n        for (let k = 0; k < size; k++) {\n            if (indexes[k] <= k) {\n                continue;\n            }\n\n            const real = reals[indexes[k]];\n            const imag = imags[indexes[k]];\n\n            reals[indexes[k]] = reals[k];\n            imags[indexes[k]] = imags[k];\n\n            reals[k] = real;\n            imags[k] = imag;\n        }\n    }\n\n    /**\n     * This class (static) method executes IFFT.\n     * @param {Float32Array} reals This argument is the instance of `Float32Array` for real number.\n     * @param {Float32Array} imags This argument is the instance of `Float32Array` for imaginary number.\n     * @param {number} size This argument is IFFT size (power of two).\n     */\n    static IFFT(reals, imags, size) {\n        const pow2 = n => Math.pow(2.0, n);\n\n        const indexes = new Float32Array(size);\n\n        const numberOfStages = Math.log2(size);\n\n        for (let stage = 1; stage <= numberOfStages; stage++) {\n            for (let i = 0; i < pow2(stage - 1); i++) {\n                const rest = numberOfStages - stage;\n\n                for (let j = 0; j < pow2(rest, 2); j++) {\n                    const n = i * pow2(rest + 1) + j;\n                    const m = pow2(rest) + n;\n                    const r = j * pow2(stage - 1);\n\n                    const areal = reals[n];\n                    const aimag = imags[n];\n                    const breal = reals[m];\n                    const bimag = imags[m];\n                    const creal = Math.cos((2.0 * Math.PI * r) / size);\n                    const cimag = Math.sin((2.0 * Math.PI * r) / size);\n\n                    if (stage < numberOfStages) {\n                        reals[n] = areal + breal;\n                        imags[n] = aimag + bimag;\n                        reals[m] = (creal * (areal - breal)) - (cimag * (aimag - bimag));\n                        imags[m] = (creal * (aimag - bimag)) + (cimag * (areal - breal));\n                    } else {\n                        reals[n] = areal + breal;\n                        imags[n] = aimag + bimag;\n                        reals[m] = areal - breal;\n                        imags[m] = aimag - bimag;\n                    }\n                }\n            }\n        }\n\n        for (let stage = 1; stage <= numberOfStages; stage++) {\n            const rest = numberOfStages - stage;\n\n            for (let i = 0; i < pow2(stage - 1); i++) {\n                indexes[pow2(stage - 1) + i] = indexes[i] + pow2(rest);\n            }\n        }\n\n        for (let k = 0; k < size; k++) {\n            if (indexes[k] <= k) {\n                continue;\n            }\n\n            const real = reals[indexes[k]];\n            const imag = imags[indexes[k]];\n\n            reals[indexes[k]] = reals[k];\n            imags[indexes[k]] = imags[k];\n\n            reals[k] = real;\n            imags[k] = imag;\n        }\n\n        for (let k = 0; k < size; k++) {\n            reals[k] /= size;\n            imags[k] /= size;\n        }\n    }\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.pitch = 1;\n\n        // `PitchShifter` is not connected by default\n        this.state(false);\n\n        this.connect();\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n\n            switch (k) {\n                case 'pitch':\n                    if (value === undefined) {\n                        return this.pitch;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n\n                    if (v > min) {\n                        this.pitch = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.processor.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ScriptProcessorNode -> GainNode (Output);\n            this.input.connect(this.processor);\n            this.processor.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start() {\n        if (this.isActive && this.isStop) {\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.pitch !== 1)) {\n                    const realLs = new Float32Array(inputLs);\n                    const realRs = new Float32Array(inputRs);\n                    const imagLs = new Float32Array(bufferSize);\n                    const imagRs = new Float32Array(bufferSize);\n\n                    PitchShifter.FFT(realLs, imagLs, bufferSize);\n                    PitchShifter.FFT(realRs, imagRs, bufferSize);\n\n                    const arealLs = new Float32Array(bufferSize);\n                    const arealRs = new Float32Array(bufferSize);\n                    const aimagLs = new Float32Array(bufferSize);\n                    const aimagRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        const offset = Math.floor(this.pitch * i);\n\n                        let eq = 1;\n\n                        if (i > (bufferSize / 2)) {\n                            eq = 0;\n                        }\n\n                        if ((offset >= 0) && (offset < bufferSize)) {\n                            arealLs[offset] += eq * realLs[i];\n                            aimagLs[offset] += eq * imagLs[i];\n                            arealRs[offset] += eq * realRs[i];\n                            aimagRs[offset] += eq * imagRs[i];\n                        }\n                    }\n\n                    PitchShifter.IFFT(arealLs, aimagLs, bufferSize);\n                    PitchShifter.IFFT(arealRs, aimagRs, bufferSize);\n\n                    outputLs.set(arealLs);\n                    outputRs.set(arealRs);\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.connect();\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'pitch' : this.pitch\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule PitchShifter]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range = v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n\n            for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                this.depth.connect(this.filters[i].frequency);\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        if ((this.panner.positionX instanceof AudioParam) && (this.panner.positionY instanceof AudioParam) && (this.panner.positionZ instanceof AudioParam)) {\n            this.panner.positionX.setValueAtTime(this.positions.x, context.currentTime);\n            this.panner.positionY.setValueAtTime(this.positions.y, context.currentTime);\n            this.panner.positionZ.setValueAtTime(this.positions.z, context.currentTime);\n        } else {\n            this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        }\n\n        if ((this.panner.orientationX instanceof AudioParam) && (this.panner.orientationY instanceof AudioParam) && (this.panner.orientationZ instanceof AudioParam)) {\n            this.panner.orientationX.setValueAtTime(this.orientations.x, context.currentTime);\n            this.panner.orientationY.setValueAtTime(this.orientations.y, context.currentTime);\n            this.panner.orientationZ.setValueAtTime(this.orientations.z, context.currentTime);\n        } else {\n            this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n        }\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n\n                        if ((this.panner.positionX instanceof AudioParam) && (this.panner.positionY instanceof AudioParam) && (this.panner.positionZ instanceof AudioParam)) {\n                            this.panner.positionX.setValueAtTime(this.positions.x, this.context.currentTime);\n                            this.panner.positionY.setValueAtTime(this.positions.y, this.context.currentTime);\n                            this.panner.positionZ.setValueAtTime(this.positions.z, this.context.currentTime);\n                        } else {\n                            this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                        }\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n\n                        if ((this.panner.orientationX instanceof AudioParam) && (this.panner.orientationY instanceof AudioParam) && (this.panner.orientationZ instanceof AudioParam)) {\n                            this.panner.orientationX.setValueAtTime(this.orientations.x, this.context.currentTime);\n                            this.panner.orientationY.setValueAtTime(this.orientations.y, this.context.currentTime);\n                            this.panner.orientationZ.setValueAtTime(this.orientations.z, this.context.currentTime);\n                        } else {\n                            this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                        }\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v >= 0) && (v <= 360)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v >= 0) && (v <= 360)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if ((v >= 0) && (v <= 1)) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Listener extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.forwards  = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        if ((this.listener.positionX instanceof AudioParam) && (this.listener.positionY instanceof AudioParam) && (this.listener.positionZ instanceof AudioParam)) {\n            this.listener.positionX.setValueAtTime(this.positions.x, context.currentTime);\n            this.listener.positionY.setValueAtTime(this.positions.y, context.currentTime);\n            this.listener.positionZ.setValueAtTime(this.positions.z, context.currentTime);\n        } else {\n            this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        }\n\n        if ((this.listener.forwardX instanceof AudioParam) &&\n            (this.listener.forwardY instanceof AudioParam) &&\n            (this.listener.forwardZ instanceof AudioParam) &&\n            (this.listener.upX instanceof AudioParam) &&\n            (this.listener.upY instanceof AudioParam) &&\n            (this.listener.upZ instanceof AudioParam)) {\n            this.listener.forwardX.setValueAtTime(this.forwards.x, context.currentTime);\n            this.listener.forwardY.setValueAtTime(this.forwards.y, context.currentTime);\n            this.listener.forwardZ.setValueAtTime(this.forwards.z, context.currentTime);\n            this.listener.upX.setValueAtTime(this.ups.x, context.currentTime);\n            this.listener.upY.setValueAtTime(this.ups.y, context.currentTime);\n            this.listener.upZ.setValueAtTime(this.ups.z, context.currentTime);\n        } else {\n            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n        }\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n\n                        if ((this.listener.positionX instanceof AudioParam) && (this.listener.positionY instanceof AudioParam) && (this.listener.positionZ instanceof AudioParam)) {\n                            this.listener.positionX.setValueAtTime(this.positions.x, this.context.currentTime);\n                            this.listener.positionY.setValueAtTime(this.positions.y, this.context.currentTime);\n                            this.listener.positionZ.setValueAtTime(this.positions.z, this.context.currentTime);\n                        } else {\n                            this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                        }\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.forwards[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.forwards[k.charAt(1)] = v;\n\n                        if ((this.listener.forwardX instanceof AudioParam) &&\n                            (this.listener.forwardY instanceof AudioParam) &&\n                            (this.listener.forwardZ instanceof AudioParam) &&\n                            (this.listener.upX instanceof AudioParam) &&\n                            (this.listener.upY instanceof AudioParam) &&\n                            (this.listener.upZ instanceof AudioParam)) {\n                            this.listener.forwardX.setValueAtTime(this.forwards.x, this.context.currentTime);\n                            this.listener.forwardY.setValueAtTime(this.forwards.y, this.context.currentTime);\n                            this.listener.forwardZ.setValueAtTime(this.forwards.z, this.context.currentTime);\n                            this.listener.upX.setValueAtTime(this.ups.x, this.context.currentTime);\n                            this.listener.upY.setValueAtTime(this.ups.y, this.context.currentTime);\n                            this.listener.upZ.setValueAtTime(this.ups.z, this.context.currentTime);\n                        } else {\n                            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n                        }\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n\n                        if ((this.listener.forwardX instanceof AudioParam) &&\n                            (this.listener.forwardY instanceof AudioParam) &&\n                            (this.listener.forwardZ instanceof AudioParam) &&\n                            (this.listener.upX instanceof AudioParam) &&\n                            (this.listener.upY instanceof AudioParam) &&\n                            (this.listener.upZ instanceof AudioParam)) {\n                            this.listener.forwardX.setValueAtTime(this.forwards.x, this.context.currentTime);\n                            this.listener.forwardY.setValueAtTime(this.forwards.y, this.context.currentTime);\n                            this.listener.forwardZ.setValueAtTime(this.forwards.z, this.context.currentTime);\n                            this.listener.upX.setValueAtTime(this.ups.x, this.context.currentTime);\n                            this.listener.upY.setValueAtTime(this.ups.y, this.context.currentTime);\n                            this.listener.upZ.setValueAtTime(this.ups.z, this.context.currentTime);\n                        } else {\n                            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n                        }\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'positions' : this.positions,\n            'forwards'  : this.forwards,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        if ((input instanceof AudioNode) && (output instanceof AudioNode)) {\n            input.connect(this.generators[i]);\n            this.generators[i].connect(output);\n        } else if (input instanceof AudioNode) {\n            input.connect(this.generators[i]);\n        } else if (output instanceof AudioNode) {\n            this.generators[i].connect(output);\n        }\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @param {boolean} useCurve This argument is to use different methods.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime, useCurve) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            // NOTE: https://www.w3.org/TR/webaudio/#dom-audioparam-settargetattime\n            if (useCurve) {\n                this.generators[activeIndex].gain.setValueCurveAtTime(new Float32Array([1, 0.5, 0.25, 0]), t3, t4);\n            } else {\n                this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\nimport { Analyser } from './Analyser';\nimport { Recorder } from './Recorder';\nimport { Session } from './Session';\nimport { Effector } from './Effectors/Effector';\nimport { Compressor } from './Effectors/Compressor';\nimport { Distortion } from './Effectors/Distortion';\nimport { Wah } from './Effectors/Wah';\nimport { PitchShifter } from './Effectors/PitchShifter';\nimport { Equalizer } from './Effectors/Equalizer';\nimport { Filter } from './Effectors/Filter';\nimport { Autopanner } from './Effectors/Autopanner';\nimport { AutopannerFallback } from './Effectors/AutopannerFallback';\nimport { Tremolo } from './Effectors/Tremolo';\nimport { Ringmodulator } from './Effectors/Ringmodulator';\nimport { Phaser } from './Effectors/Phaser';\nimport { Flanger } from './Effectors/Flanger';\nimport { Chorus } from './Effectors/Chorus';\nimport { Delay } from './Effectors/Delay';\nimport { Reverb } from './Effectors/Reverb';\nimport { Panner } from './Effectors/Panner';\nimport { Listener } from './Effectors/Listener';\nimport { EnvelopeGenerator } from './Effectors/EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`, `ProcessorModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.init(context, bufferSize);\n    }\n\n    /**\n     * This method initials modules.\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    init(context, bufferSize) {\n        if (Array.isArray(this.modules) && (this.modules.length > 0)) {\n            this.mastervolume.disconnect(0);\n            this.mastervolume = null;\n\n            this.processor.disconnect(0);\n            this.processor = null;\n\n            this.analyser.input.disconnect(0);\n            this.analyser = null;\n\n            this.recorder.processor.disconnect(0);\n            this.recorder = null;\n\n            this.session.sender.disconnect(0);\n            this.session  = null;\n\n            this.modules.forEach(module => {\n                module.input.disconnect(0);\n                module.output.disconnect(0);\n                module = null;\n            });\n\n            this.modules = [];\n        }\n\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        let size = parseInt(bufferSize, 10);\n\n        switch (size) {\n            case   256:\n            case   512:\n            case  1024:\n            case  2048:\n            case  4096:\n            case  8192:\n            case 16384:\n                break;\n            default:\n                size = 0;\n                break;\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, size);\n        this.distortion        = new Distortion(context, size);\n        this.wah               = new Wah(context, size);\n        this.pitchshifter      = new PitchShifter(context, size);\n        this.equalizer         = new Equalizer(context, size);\n        this.filter            = new Filter(context, size);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, size) : new AutopannerFallback(context, size);\n        this.tremolo           = new Tremolo(context, size);\n        this.ringmodulator     = new Ringmodulator(context, size);\n        this.phaser            = new Phaser(context, size);\n        this.flanger           = new Flanger(context, size);\n        this.chorus            = new Chorus(context, size);\n        this.delay             = new Delay(context, size);\n        this.reverb            = new Reverb(context, size);\n        this.panner            = new Panner(context, size);\n        this.listener          = new Listener(context, size);\n        this.envelopegenerator = new EnvelopeGenerator(context);\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.pitchshifter,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 0, 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.init(this.context, bufferSize);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method installs customized effector.\n     * @param {string} name This argument is in order to select effector.\n     * @param {Effector} effector This argument is the subclass that extends `Effector` class.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    install(name, effector) {\n        if (!(effector instanceof Effector)) {\n            return this;\n        }\n\n        if (String(name) in this) {\n            return this;\n        }\n\n        this[name] = effector;\n\n        if (this.modules.every(module => module !== effector)) {\n            this.modules.push(effector);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'pitchshifter' :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                return this[m];  // Installed effector\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effector's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effector's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) { reals = reals.subarray(0, MAX_SIZE); }\n                                if (imags.length > MAX_SIZE) { imags = imags.subarray(0, MAX_SIZE); }\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) { reals[0] = 0; }\n                                if (imags[0] !== 0) { imags[0] = 0; }\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { Oscillator } from './Oscillator';\nimport { Glide } from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n                const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >= 0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        if (source.loop) {\n            source.start(startTime, (startTime + source.loopStart), (source.loopEnd - startTime));\n        } else {\n            source.start(startTime);\n        }\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex = this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule }  from '../SoundModule';\n\nexport class NoiseModule extends SoundModule {\n    static WHITE_NOISE    = 'whitenoise';\n    static PINK_NOISE     = 'pinknoise';\n    static BROWNIAN_NOISE = 'browniannoise';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.type = NoiseModule.WHITE_NOISE;\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|NoiseModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = '';\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === NoiseModule.WHITE_NOISE) || (v === NoiseModule.PINK_NOISE) || (v === NoiseModule.BROWNIAN_NOISE)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        const bufferSize = this.processor.bufferSize;\n\n        let lastOut = 0;\n\n        this.processor.onaudioprocess = event => {\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            if (this.envelopegenerator.isStop()) {\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n            } else {\n                switch (this.type) {\n                    case NoiseModule.WHITE_NOISE:\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = 2 * (Math.random() - 0.5);\n                            outputRs[i] = 2 * (Math.random() - 0.5);\n                        }\n\n                        break;\n                    case NoiseModule.PINK_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        let b0 = 0;\n                        let b1 = 0;\n                        let b2 = 0;\n                        let b3 = 0;\n                        let b4 = 0;\n                        let b5 = 0;\n                        let b6 = 0;\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            b0 = (0.99886 * b0) + (white * 0.0555179);\n                            b1 = (0.99332 * b1) + (white * 0.0750759);\n                            b2 = (0.96900 * b2) + (white * 0.1538520);\n                            b3 = (0.86650 * b3) + (white * 0.3104856);\n                            b4 = (0.55000 * b4) + (white * 0.5329522);\n                            b5 = (-0.7616 * b5) - (white * 0.0168980);\n\n                            outputLs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n                            outputRs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n\n                            outputLs[i] *= 0.11;\n                            outputRs[i] *= 0.11;\n\n                            b6 = white * 0.115926;\n                        }\n\n                        break;\n                    case NoiseModule.BROWNIAN_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            outputLs[i] = (lastOut + (0.02 * white)) / 1.02;\n                            outputRs[i] = (lastOut + (0.02 * white)) / 1.02;\n\n                            lastOut = (lastOut + (0.02 * white)) / 1.02;\n\n                            outputLs[i] *= 3.5;\n                            outputRs[i] *= 3.5;\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[NoiseModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { VocalCanceler } from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        this.envelopegenerator.setGenerator(0);\n        this.envelopegenerator.param({\n            'attack'  : 0,\n            'decay'   : 0.01,\n            'sustain' : 1,\n            'release' : 0.01\n        });\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n\n                        const startTime   = this.context.currentTime;\n                        const currentTime = this.param('currentTime');\n                        const duration    = this.param('duration');\n\n                        this.envelopegenerator.start(startTime);\n                        this.envelopegenerator.stop((startTime + ((duration - currentTime) / v)), true);\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} startTime This argument is the time that audio is started at. The default value is 0.\n     * @param {number} endTime This argument is the time that audio is ended at. The default value is audio duration.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(startTime, endTime, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            // This value is `AudioContext#currentTime`\n            const currentTime = this.context.currentTime;\n\n            const start = parseFloat(startTime);\n            const end   = parseFloat(endTime);\n\n            if (end >= 0) {\n                this.currentTime = ((start >= 0) && (start <= end)) ? start : 0;\n            } else {\n                this.currentTime = ((start >= 0) && (start <= this.buffer.duration)) ? start : 0;\n            }\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n            this.source.loopStart          = this.currentTime;\n            this.source.loopEnd            = (end >= 0) ? end : this.buffer.duration;\n\n            // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.envelopegenerator.ready(0, this.source, this.processor);\n            this.connect(this.processor, connects);\n\n            if (end >= 0) {\n                this.source.start(currentTime, this.currentTime, (end - start));\n            } else {\n                this.source.start(currentTime, this.currentTime, (this.buffer.duration - this.currentTime));\n            }\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.envelopegenerator.start(currentTime);\n\n            if (end >= 0) {\n                this.envelopegenerator.stop((currentTime + ((end - start) / this.source.playbackRate.value)), true);\n            } else {\n                this.envelopegenerator.stop((currentTime + ((this.buffer.duration - start) / this.source.playbackRate.value)), true);\n            }\n\n            this.on(currentTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.loopEnd)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            this.callbacks.update(this.source, this.currentTime);\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.stop();\n\n                            if ((this.analyser.timeOverviewL.param('mode') === 'sprite') || (this.analyser.timeOverviewR.param('mode') === 'sprite')) {\n                                this.start(this.source.loopStart, this.source.loopEnd, connects, processCallback);\n                            } else {\n                                this.start(0, this.buffer.duration, connects, processCallback);\n                            }\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} startTime This argument is the time that audio is started at. The default value is 0.\n     * @param {number} endTime This argument is the time that audio is ended at. The default value is audio duration.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(startTime, endTime, connects, processCallback) {\n        if (this.paused) {\n            this.start(startTime, endTime, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /**\n     * This method is getter or setter for fade-in time.\n     * @param {number} time This argument is fade-in time. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as fade-in time. Otherwise, this is returned for method chain.\n     */\n    fadeIn(time) {\n        if (time === undefined) {\n            return this.envelopegenerator.param('attack');\n        }\n\n        this.envelopegenerator.param('attack', time);\n\n        const startTime    = this.context.currentTime;\n        const currentTime  = this.param('currentTime');\n        const duration     = this.param('duration');\n        const playbackRate = this.param('playbackRate');\n\n        this.envelopegenerator.start(startTime);\n        this.envelopegenerator.stop((startTime + ((duration - currentTime) / playbackRate)), true);\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for fade-out time.\n     * @param {number} time This argument is fade-out time. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as fade-out time. Otherwise, this is returned for method chain.\n     */\n    fadeOut(time) {\n        if (time === undefined) {\n            return this.envelopegenerator.param('release');\n        }\n\n        this.envelopegenerator.param('release', time);\n\n        const startTime    = this.context.currentTime;\n        const currentTime  = this.param('currentTime');\n        const duration     = this.param('duration');\n        const playbackRate = this.param('playbackRate');\n\n        this.envelopegenerator.start(startTime);\n        this.envelopegenerator.stop((startTime + ((duration - currentTime) / playbackRate)), true);\n\n        return this;\n    }\n\n    /**\n     *  This method sprites audio.\n     *  @param {object} sprites This argument is the associative array that contains sprite times.\n     *  @return {object} This is returned as the associative array that contains sprited `AudioBuffer`.\n     */\n    sprite(sprites) {\n        if (!this.isBuffer()) {\n            return null;\n        }\n\n        if (Object.prototype.toString.call(sprites) !== '[object Object]') {\n            return null;\n        }\n\n        let dataLs = null;\n        let dataRs = null;\n\n        if (this.buffer.numberOfChannels > 0) {\n            dataLs = this.buffer.getChannelData(0);\n        }\n\n        if (this.buffer.numberOfChannels > 1) {\n            dataRs = this.buffer.getChannelData(1);\n        }\n\n        return Object.keys(sprites).reduce((audioBuffers, key) => {\n            const times = sprites[key];\n\n            if (!Array.isArray(times) || (times.length !== 2)) {\n                return;\n            }\n\n            const sampleRate = this.buffer.sampleRate;\n            const start      = parseInt((times[0] * sampleRate), 10);\n            const end        = parseInt((times[1] * sampleRate), 10);\n            const length     = end - start;\n\n            if (isNaN(length) || (length <= 0)) {\n                return null;\n            }\n\n            let spritedDataLs = null;\n            let spritedDataRs = null;\n            let buffer        = null;\n\n            switch (this.buffer.numberOfChannels) {\n                case 1:\n                    spritedDataLs = new Float32Array(length);\n\n                    for (let i = start; i < end; i++) {\n                        spritedDataLs[i - start] = dataLs[i];\n                    }\n\n                    buffer = this.context.createBuffer(1, length, sampleRate);\n\n                    buffer.copyToChannel(spritedDataLs, 0);\n\n                    audioBuffers[key] = buffer;\n\n                    return audioBuffers;\n                case 2:\n                    spritedDataLs = new Float32Array(length);\n                    spritedDataRs = new Float32Array(length);\n\n                    for (let i = start; i < end; i++) {\n                        spritedDataLs[i - start] = dataLs[i];\n                        spritedDataRs[i - start] = dataRs[i];\n                    }\n\n                    buffer = this.context.createBuffer(2, length, sampleRate);\n\n                    buffer.copyToChannel(spritedDataLs, 0);\n                    buffer.copyToChannel(spritedDataRs, 1);\n\n                    audioBuffers[key] = buffer;\n\n                    return audioBuffers;\n                default:\n                    return {};\n            }\n        }, {});\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport { AudioModule }  from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        // for Audio Streaming\n        this.mse      = null;  // for the instance of `MediaSource`\n        this.sb       = null;  // for the instance of `SourceBuffer`\n        this.file     = '';\n        this.mimeType = '';\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement` or `MediaSource` or `SourceBuffer`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended`,\n        // `sourceopen`, `sourceended`, `sourceclose`, `updateend`, `error` ... etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        this.envelopegenerator.setGenerator(0);\n        this.envelopegenerator.param({\n            'attack'  : 0,\n            'decay'   : 0.01,\n            'sustain' : 1,\n            'release' : 0.01\n        });\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        if (this.autoplay && this.media.src) {\n            this.context.resume()\n                .then(() => {\n                    this.start(this.media.currentTime);\n                })\n                .catch(() => {\n                    throw new Error('Autoplay is failed');\n                });\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n\n                        const startTime   = this.context.currentTime;\n                        const currentTime = this.param('currentTime');\n                        const duration    = this.param('duration');\n\n                        this.envelopegenerator.start(startTime);\n\n                        // `duration` is infinite in the case of audio streaming\n                        if (isFinite(duration)) {\n                            this.envelopegenerator.stop((startTime + ((duration - currentTime) / v)), true);\n                        }\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n\n                            const startTime    = this.context.currentTime;\n                            const duration     = this.param('duration');\n                            const playbackRate = this.param('playbackRate');\n\n                            this.envelopegenerator.start(startTime);\n\n                            // `duration` is infinite in the case of audio streaming\n                            if (isFinite(duration)) {\n                                this.envelopegenerator.stop((startTime + ((duration - v) / playbackRate)), true);\n                            }\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media && this.media.duration ? this.media.duration : 0;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @param {string} mimeType This argument is required in the case of audio streaming.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source, mimeType) {\n        const src = String(source);\n\n        if (this.mse && (this.mse.readyState === 'open')) {\n            this.mse.endOfStream();\n            window.URL.revokeObjectURL(this.media.src);\n\n            this.mse.removeEventListener('sourceopen',  this.onSourceOpen,  false);\n            this.mse.removeEventListener('sourceended', this.onSourceEnded, false);\n            this.mse.removeEventListener('sourceclose', this.onSourceClose, false);\n\n            this.sb.removeEventListener('updateend', this.onSourceBufferUpdateEnd, false);\n            this.sb.removeEventListener('error',     this.onSourceBufferError,     false);\n        }\n\n        try {\n            if (mimeType) {\n                // Audio Streaming\n                if (!MediaSource || !MediaSource.isTypeSupported(mimeType)) {\n                    throw new Error('This Browser does not support `MediaSource` or MIME type');\n                }\n\n                this.media.removeAttribute('src');\n\n                this.media.load();\n\n                this.mse       = new MediaSource();\n                this.media.src = window.URL.createObjectURL(this.mse);\n                this.mimeType  = mimeType;\n                this.file      = src;\n\n                this.onSourceOpen  = this.onSourceOpen.bind(this);\n                this.onSourceEnded = this.onSourceEnded.bind(this);\n                this.onSourceClose = this.onSourceClose.bind(this);\n\n                this.mse.addEventListener('sourceopen',  this.onSourceOpen,  false);\n                this.mse.addEventListener('sourceended', this.onSourceEnded, false);\n                this.mse.addEventListener('sourceclose', this.onSourceClose, false);\n            } else if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1) || (this.ext === '')) {\n                // `Data URL` or `Object URL` or Full path\n                this.media.src = src;\n            } else {\n                // Path\n                this.media.src = `${src}.${this.ext}`;\n            }\n        } catch (error) {\n            throw new Error(error.message);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if (this.source instanceof MediaElementAudioSourceNode) {\n            // MediaElementAudioSourceNode (Input) -> GainNode (Envelope Generator) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.envelopegenerator.ready(0, this.source, this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const startTime = this.context.currentTime;\n\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.envelopegenerator.start(startTime);\n\n                // `duration` is infinite in the case of audio streaming\n                if (isFinite(this.media.duration)) {\n                    this.envelopegenerator.stop((startTime + ((this.media.duration - pos) / this.media.playbackRate)), true);\n                }\n\n                this.on(startTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop(() => {\n                    if (this.autoplay) {\n                        this.media.muted  = this.muted = true;\n                        this.media.volume = 0;\n                    }\n\n                    this.start(position, connects, processCallback);\n                }, () => {\n                });\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @param {function} successCallback This argument is invoked when `HTMLMediaElement#play` is successful.\n     * @param {function} errorCallback This argument is invoked when `HTMLMediaElement#play` is failure.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop(successCallback, errorCallback) {\n        if (this.source instanceof MediaElementAudioSourceNode) {\n            // ref: https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\n            this.media.play()\n                .then(() => {\n                    this.media.pause();\n\n                    this.off(this.context.currentTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n\n                    if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                        successCallback();\n                    }\n\n                    return Promise.resolve();\n                })\n                .catch(error => {\n                    if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                        errorCallback(error);\n                    }\n\n                    return Promise.reject(error);\n                });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /**\n     * This method is event listener for `MediaSource`\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onSourceOpen(event) {\n        this.sb = this.mse.addSourceBuffer(this.mimeType);\n\n        this.sb.mode = 'sequence';\n\n        this.onSourceBufferUpdateEnd = this.onSourceBufferUpdateEnd.bind(this);\n        this.onSourceBufferError     = this.onSourceBufferError.bind(this);\n\n        this.sb.addEventListener('updateend', this.onSourceBufferUpdateEnd, false);\n        this.sb.addEventListener('error',     this.onSourceBufferError,     false);\n\n        if ('sourceopen' in this.listeners) {\n            this.listeners.sourceopen(event);\n        }\n\n        const request = new Request(this.file);\n\n        fetch(request)\n            .then(response => {\n                return response.arrayBuffer();\n            })\n            .then(data => {\n                this.sb.appendBuffer(data);\n            })\n            .catch(error => {\n                if ('error' in this.listeners) {\n                    this.listeners.error(event, error);\n                }\n            });\n    }\n\n    /**\n     * This method is event listener for `MediaSource`\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onSourceEnded(event) {\n        if ('sourceended' in this.listeners) {\n            this.listeners.sourceended(event);\n        }\n    }\n\n    /**\n     * This method is event listener for `MediaSource`\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onSourceClose(event) {\n        if ('sourceclose' in this.listeners) {\n            this.listeners.sourceclose(event);\n        }\n    }\n\n    /**\n     * This method is event listener for `SourceBuffer`\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onSourceBufferUpdateEnd(event) {\n        if ('updateend' in this.listeners) {\n            this.listeners.updateend(event);\n        }\n    }\n\n    /**\n     * This method is event listener for `SourceBuffer`\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onSourceBufferError(event) {\n        if ('error' in this.listeners) {\n            this.listeners.error(event);\n        }\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /**\n     * This method requests Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    requestPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media === document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return this.media.requestPictureInPicture();\n    }\n\n    /**\n     * This method exits from Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    exitPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media !== document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return document.exitPictureInPicture();\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { NoiseGate }  from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\nimport { AudioModule } from '../AudioModule';\nimport { MediaModule } from '../MediaModule';\nimport { StreamModule } from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\nexport class ProcessorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method sets the instance of `ScriptProcessorNode` or `AudioWorkletNode`.\n     * @param {ScriptProcessorNode|AudioWorkletNode} processor This argument is the instance of `ScriptProcessorNode` or `AudioWorkletNode`.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    setup(processor) {\n        if ((processor instanceof ScriptProcessorNode) || (processor instanceof AudioWorkletNode)) {\n            this.processor = processor;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts `onaudioprocess` event in the instance of `ScriptProcessorNode`.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    start(processCallback, connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    /**\n     * This method stops `onaudioprocess` event in the instance of `ScriptProcessorNode`.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessodNode`.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[ProcessorModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\nimport { NoiseModule } from '../NoiseModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport class MML {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n    static FREQUENCY_RATIO   = Math.pow(2, (1 / 12));  // about 1.059463\n    static MIN_A             = 27.5;\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => (index >= 0) ? (MML.MIN_A * Math.pow(MML.FREQUENCY_RATIO, index)) : -1;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule` or `NoiseModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.offset = 0;\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule|NoiseModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @param {number} offset This argument is in order to correct the index of one-shot audio.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls, offset) {\n        this.offset = parseInt(offset, 10);\n\n        if (isNaN(this.offset) || (this.offset < 0)) {\n            this.offset = 0;\n        }\n\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        this.clear();\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof NoiseModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>} */\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return this;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm <= 0) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return this;\n                    }\n\n                    timeOf4note = MML.ONE_MINUTES / bpm;\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return this;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return this;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return this;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return this;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return this;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop,\n                        'note'        : note\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                this.callbacks.start(sequence);\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n                this.callbacks.start(sequence);\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start((sequence.indexes[i] + this.offset), connects, processCallback);\n                    }\n                }\n\n                this.callbacks.start(sequence, this.offset);\n            } else if (this.source instanceof NoiseModule) {\n                this.source.start(connects);\n                this.callbacks.start(sequence);\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    this.callbacks.stop(sequence);\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n                    this.callbacks.stop(sequence);\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop((sequence.indexes[i] + this.offset), processCallback);\n                        }\n                    }\n\n                    this.callbacks.stop(sequence, this.offset);\n                } else if (this.source instanceof NoiseModule) {\n                    this.source.stop();\n                    this.callbacks.stop(sequence);\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            this.callbacks.stop(sequence);\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n            this.callbacks.stop(sequence);\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop((index + this.offset), processCallback);\n                }\n            }\n\n            this.callbacks.stop(sequence, this.offset);\n        } else if (this.source instanceof NoiseModule) {\n            this.source.stop();\n            this.callbacks.stop(sequence);\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method converts MML to ABC Notation.\n     * @param {string} mml This argument is MML string.\n     * @param {number} X This argument is file number in ABC Notation.\n     * @param {string} T This argument is title in ABC Notation.\n     * @param {string} M This argument is beat in ABC Notation.\n     * @param {string} L This argument is note duration in ABC Notation.\n     * @param {string} K This argument is tone in ABC Notation.\n     * @return {string} This is returned as ABC Notation.\n     */\n    toABC(mml, X, T, M, L, K) {\n        let abc = '';\n\n        abc += `X:${X ? X : 1}\\n`;\n        abc += `T:${T ? T : ''}\\n`;\n        abc += `M:${M ? M : '4/4'}\\n`;\n        abc += `L:${L ? L : '1/256'}\\n`;\n        abc += `K:${K ? K : ''}\\n`;\n\n        const notes = mml.match(MML.REGEXP_MML);\n\n        if (notes === null) {\n            return abc;\n        }\n\n        let octave        = null;\n        let totalDuration = 0;\n\n        while (notes.length > 0) {\n            const note = notes.shift().trim();\n\n            if (MML.REGEXP_TEMPO.test(note)) {\n                const Q = parseInt(note.slice(1), 10);\n\n                if (Q > 0) {\n                    abc += `Q:1/4=${Q}\\n`;\n                } else {\n                    return abc;\n                }\n            } else if (MML.REGEXP_OCTAVE.test(note)) {\n                octave = parseInt(note.slice(1), 10);\n\n                if (octave < 0) {\n                    return abc;\n                }\n            } else if (MML.REGEXP_NOTE.test(note)) {\n                if (octave === null) {\n                    return abc;\n                }\n\n                let splittedNotes = null;\n\n                if (note.indexOf('&') === -1) {\n                    splittedNotes = [note];\n                } else {\n                    splittedNotes = note.split('&');\n                }\n\n                let chord = '';\n\n                while (splittedNotes.length > 0) {\n                    const splittedNote = splittedNotes.shift();\n\n                    const duration = parseInt(splittedNote.replace(/^.+?(\\d+)\\.*$/, '$1'), 10);\n\n                    let n = '';\n                    let d = 0;\n\n                    switch (duration) {\n                        case 1:\n                            n = splittedNote.replace('1', '256');\n                            break;\n                        case 2:\n                            n = splittedNote.replace('2', '128');\n                            break;\n                        case 4:\n                            n = splittedNote.replace('4', '64');\n                            break;\n                        case 8:\n                            n = splittedNote.replace('8', '32');\n                            break;\n                        case 16:\n                            n = splittedNote.replace('16', '16');\n                            break;\n                        case 32:\n                            n = splittedNote.replace('32', '8');\n                            break;\n                        case 64:\n                            n = splittedNote.replace('64', '4');\n                            break;\n                        case 128:\n                            n = splittedNote.replace('128', '2');\n                            break;\n                        case 256:\n                            n = splittedNote.replace('256', '1');\n                            break;\n                        // Tuplet\n                        case 6:\n                            n = `(3${splittedNote.replace('6', '128')}`;\n                            d = 128 / 3;\n                            break;\n                        case 12:\n                            n = `(3${splittedNote.replace('12', '64')}`;\n                            d = 64 / 3;\n                            break;\n                        case 18:\n                            n = `(9${splittedNote.replace('18', '128')}`;\n                            d = 128 / 9;\n                            break;\n                        case 24:\n                            n = `(3${splittedNote.replace('24', '32')}`;\n                            d = 32 / 3;\n                            break;\n                        case 36:\n                            n = `(9${splittedNote.replace('36', '64')}`;\n                            d = 64 / 9;\n                            break;\n                        case 48:\n                            n = `(3${splittedNote.replace('48', '16')}`;\n                            d = 16 / 3;\n                            break;\n                        case 72:\n                            n = `(9${splittedNote.replace('72', '32')}`;\n                            d = 32 / 9;\n                            break;\n                        case 96:\n                            n = `(3${splittedNote.replace('96', '8')}`;\n                            d = 8 / 3;\n                            break;\n                        case 144:\n                            n = `(9${splittedNote.replace('144', '16')}`;\n                            d = 16 / 9;\n                            break;\n                        case 192:\n                            n = `(3${splittedNote.replace('192', '4')}`;\n                            d = 4 / 3;\n                            break;\n                        default:\n                            return abc;\n                    }\n\n                    if (n.indexOf('.') !== -1) {\n                        n = n.replace(/^(.+?)\\d+\\.+$/, `$1${1.5 * parseInt(n.replace(/^.+?(\\d+)\\.+$/, '$1'), 10)}`);\n                    }\n\n                    if (n.indexOf('(') === -1) {\n                        totalDuration += parseInt(n.replace(/^.+?(\\d+)\\.*$/i, '$1'), 10);\n                    } else {\n                        totalDuration += d;\n                    }\n\n                    if (totalDuration >= 256) {\n                        n += ' | ';\n                        totalDuration = 0;\n                    }\n\n                    if (/R/i.test(n)) {\n                        abc += `${n} `;\n                        continue;\n                    }\n\n                    let o = '';\n\n                    switch (octave) {\n                        case 0:\n                            o = ',,,,';\n                            break;\n                        case 1:\n                            o = ',,,';\n                            break;\n                        case 2:\n                            o = ',,';\n                            break;\n                        case 3:\n                            o = ',';\n                            break;\n                        case 5:\n                            o = '\\'';\n                            break;\n                        case 6:\n                            o = '\\'\\'';\n                            break;\n                        case 7:\n                            o = '\\'\\'\\'';\n                            break;\n                        case 4 :\n                        default:\n                            break;\n                    }\n\n                    const matches = n.match(/^(\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i);\n\n                    if (matches === null) {\n                        return abc;\n                    }\n\n                    const tuplet      = matches[1] ? matches[1] : '';\n                    const chordLength = matches[2].length;\n                    const restNote    = matches[3] ? matches[3] : '';\n\n                    let start = 0;\n\n                    if (tuplet.length > 0) {\n                        n = n.replace(/^(?:\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i, '$1$2');\n                    }\n\n                    if (chordLength === 1) {\n                        chord += `${tuplet}${n.slice(0, 1)}${o}${restNote}`;\n                    } else if ((chordLength === 2) && /[#+-]/.test(n.charAt(1))) {\n                        chord += `${tuplet}${n.slice(1, 2)}${n.slice(0, 1)}${o}${restNote}`;\n                    } else {\n                        while (start < chordLength) {\n                            if (start === 0) {\n                                chord += `${tuplet}[`;\n                            }\n\n                            if (/[#+-]/.test(n.charAt(start + 1))) {\n                                chord += `${n.slice((start + 1), (start + 2))}${n.slice(start, (start + 1))}${o}`;\n                                start += 2;\n                            } else {\n                                chord += `${n.slice(start, (start + 1))}${o}`;\n                                start++;\n                            }\n\n                            if (start === chordLength) {\n                                chord += `]${restNote}`;\n                            }\n                        }\n                    }\n\n                    if (splittedNotes.length > 0) {\n                        chord += '&';\n                    } else {\n                        abc += `${chord} `;\n                    }\n                }\n            }\n        }\n\n        return abc.replace(/R/gi, 'z')\n            .replace(/[#+]/g, '^')\n            .replace(/-/g, '_')\n            .replace(/&/g, '-')\n            .replace(/\\s{2}/g, ' ');\n    }\n\n    /**\n     * This method clears sequences;\n     */\n    clear() {\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {type} string This argument is response type that is one of 'text', 'arraybuffer', 'blob', 'document', 'json'. The default value is 'arraybuffer'.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, type, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if ((xhr.status === 200) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n            successCallback(event, xhr.response);\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = /text|arraybuffer|blob|document|json/.test(String(type).toLowerCase()) ? String(type).toLowerCase() : 'arraybuffer';\n    xhr.send(null);\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function exitFullscreen() {\n    if (document.exitFullscreen) {\n        return document.exitFullscreen();\n    }\n\n    if (document.webkitCancelFullScreen) {\n        return document.webkitCancelFullScreen();\n    }\n\n    if (document.mozCancelFullScreen) {\n        return document.mozCancelFullScreen();\n    }\n\n    if (document.msExitFullscreen) {\n        return document.msExitFullscreen();\n    }\n\n    if (document.cancelFullScreen) {\n        return document.cancelFullScreen();\n    }\n\n    return Promise.reject('Cannot exit from full screen.');\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'ObjectURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File|ObjectURL} This is returned as the instance of `File` (extends `Blob`) or Object URL.\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        if (/objecturl/i.test(type)) {\n            return window.URL.createObjectURL(file);\n        }\n\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function requestFullscreen(element) {\n    if (!(element instanceof Element)) {\n        return Promise.reject('Invalid argument.');\n    }\n\n    if (element.requestFullscreen) {\n        return element.requestFullscreen();\n    }\n\n    if (element.webkitRequestFullscreen) {\n        return element.webkitRequestFullscreen();\n    }\n\n    if (element.mozRequestFullScreen) {\n        return element.mozRequestFullScreen();\n    }\n\n    if (element.msRequestFullscreen) {\n        return element.msRequestFullscreen();\n    }\n\n    return Promise.reject('Cannot change to full screen.');\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method creates text file.\n * @param {string} text This argument is string.\n * @return {string} This is returned as text file.\n */\nexport function toTextFile(text) {\n    /**\n     * This function converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    const toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    const base64  = window.btoa(toAscii(String(text)));\n    const dataURL = `data:text/plain;base64,${base64}`;\n\n    return dataURL;\n}\n","'use strict';\n\nimport { SoundModule } from './SoundModule';\nimport { OscillatorModule } from './OscillatorModule';\nimport { OneshotModule } from './OneshotModule';\nimport { NoiseModule } from './NoiseModule';\nimport { AudioModule } from './AudioModule';\nimport { MediaModule } from './MediaModule';\nimport { StreamModule } from './StreamModule';\nimport { MixerModule } from './MixerModule';\nimport { ProcessorModule } from './ProcessorModule';\nimport { MIDI } from './MIDI';\nimport { MML } from './MML';\nimport { Effector } from './SoundModule/Effectors/Effector';\nimport {\n    ajax,\n    convertTime,\n    decode,\n    exitFullscreen,\n    file,\n    requestFullscreen,\n    read,\n    toFrequencies,\n    toTextFile\n} from './XSound';\n\nconst global = (typeof window !== 'undefined') ? window : {};\n\n// for legacy browsers\nglobal.AudioContext = global.AudioContext || global.webkitAudioContext;\nglobal.MediaSource  = global.MediaSource  || global.WebkitMediaSource;\nglobal.URL          = global.URL          || global.webkitURL || global.mozURL;\n\nglobal.requestAnimationFrame = global.requestAnimationFrame       ||\n                               global.webkitRequestAnimationFrame ||\n                               global.mozRequestAnimationFrame    ||\n                               (callback => global.setTimeout(callback, (1000 / 60)));\n\nglobal.cancelAnimationFrame = global.cancelAnimationFrame       ||\n                              global.webkitCancelAnimationFrame ||\n                              global.mozCancelAnimationFrame    ||\n                              global.clearTimeout;\n\nlet XSound;\n\nconst IS_XSOUND = Boolean(global.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'noise'      : new NoiseModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'processor'  : new ProcessorModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `NoiseModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `ProcessorModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'noise', 'audio', 'media', 'stream', 'mixer', 'processor', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|NoiseModule|AudioModule|MediaModule|StreamModule|MixerModule|ProcessorModule|MIDI|MML|Oscillator}\n     */\n    XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot'  :\n            case 'noise'    :\n            case 'audio'    :\n            case 'media'    :\n            case 'stream'   :\n            case 'mixer'    :\n            case 'processor':\n            case 'midi'     :\n            case 'mml'      :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.ajax              = ajax;\n    XSound.convertTime       = convertTime;\n    XSound.decode            = decode;\n    XSound.exitFullscreen    = exitFullscreen;\n    XSound.file              = file;\n    XSound.requestFullscreen = requestFullscreen;\n    XSound.read              = read;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.toTextFile        = toTextFile;\n\n    XSound.Effector = Effector;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'noise'      : new NoiseModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'processor'  : new ProcessorModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot'  :\n                case 'noise'    :\n                case 'audio'    :\n                case 'media'    :\n                case 'stream'   :\n                case 'mixer'    :\n                case 'processor':\n                case 'midi'     :\n                case 'mml'      :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Autoplay Policy\n    const setup = () => {\n        XSound.setup().then(() => {}).catch(() => {});\n\n        document.removeEventListener('click',      setup, true);\n        document.removeEventListener('mousedown',  setup, true);\n        document.removeEventListener('mouseup',    setup, true);\n        document.removeEventListener('touchstart', setup, true);\n        document.removeEventListener('touchend',   setup, true);\n    };\n\n    document.addEventListener('click',      setup, true);\n    document.addEventListener('mousedown',  setup, true);\n    document.addEventListener('mouseup',    setup, true);\n    document.addEventListener('touchstart', setup, true);\n    document.addEventListener('touchend',   setup, true);\n} else {\n    XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n}\n\n// for `<script>`\nglobal.XSound = XSound;\nglobal.X      = XSound;  // Alias of `XSound`\n\n// for ESModules and SSR (Server Side Rendering)\nif (typeof exports !== 'undefined') {\n    exports.XSound = XSound;\n    exports.X      = XSound;  // Alias of `XSound`\n}\n"],"sourceRoot":""}