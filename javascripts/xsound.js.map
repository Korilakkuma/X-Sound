{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Effectors/Effector.js","webpack:///./src/SoundModule/Effectors/Compressor.js","webpack:///./src/SoundModule/Effectors/Distortion.js","webpack:///./src/SoundModule/Effectors/Wah.js","webpack:///./src/SoundModule/Effectors/Equalizer.js","webpack:///./src/SoundModule/Effectors/Filter.js","webpack:///./src/SoundModule/Effectors/Autopanner.js","webpack:///./src/SoundModule/Effectors/AutopannerFallback.js","webpack:///./src/SoundModule/Effectors/Tremolo.js","webpack:///./src/SoundModule/Effectors/Ringmodulator.js","webpack:///./src/SoundModule/Effectors/Phaser.js","webpack:///./src/SoundModule/Effectors/Flanger.js","webpack:///./src/SoundModule/Effectors/Chorus.js","webpack:///./src/SoundModule/Effectors/Delay.js","webpack:///./src/SoundModule/Effectors/Reverb.js","webpack:///./src/SoundModule/Effectors/Panner.js","webpack:///./src/SoundModule/Effectors/Listener.js","webpack:///./src/SoundModule/Effectors/EnvelopeGenerator.js","webpack:///./src/SoundModule/index.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/NoiseModule/index.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/ProcessorModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visualizer","constructor","sampleRate","this","isActive","graphics","canvas","context","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","setup","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","param","k","String","replace","toLowerCase","v","undefined","parseFloat","Array","isArray","isError","grads","isNaN","toString","prop","test","parseInt","start","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","state","Boolean","drawTimeDomainFloat32ArrayOnCanvas","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","len","length","x","y","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","gradients","addColorStop","fillRect","drawTimeDomainFloat32ArrayBySVG","linearGradientId","path","document","createElementNS","XMLNS","setAttribute","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","stop","createFontString","TimeOverview","super","savedImage","currentTime","sprite","plotInterval","textInterval","isDown","DRAG_MODE_UPDATE","offsetX","startTime","endTime","arguments","DRAG_MODE_SPRITE","querySelector","SVG_SPRITE_CLASS_NAME","removeChild","height","Math","floor","nTextInterval","clearRect","fillText","measureText","texts","trim","getImageData","getAttribute","innerHTML","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","textContent","classList","add","SVG_CURRENT_TIME_CLASS_NAME","update","time","ImageData","putImageData","baseX","abs","baseRect","lastElementChild","previousElementSibling","drag","callback","drawNode","move","end","navigator","userAgent","onStart","onMove","onEnd","removeEventListener","window","addEventListener","draw","event","type","offsetLeft","parentNode","getOffsetX","preventDefault","pageX","touches","Time","UINT","FLOAT","ceil","SVG_LINEAR_GRADIENT_ID_TIME","FFT","min","max","mindB","maxdB","range","drawnSize","fsDivN","f","slice","SVG_LINEAR_GRADIENT_ID_FFT","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","setTimeout","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","analyser","createAnalyser","input","createGain","connect","timeOverviewL","timeOverviewR","fft","fftSize","smoothingTimeConstant","frequencyBinCount","domain","buffer","AudioBuffer","numberOfChannels","set","getChannelData","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","toUpperCase","Recorder","bufferSize","numberOfInputs","numberOfOutputs","processor","createScriptProcessor","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","paused","gainL","gainR","ready","track","isTrack","onaudioprocess","inputLs","inputBuffer","inputRs","recordedLs","recordedRs","push","disconnect","getActiveTrack","flatTrack","channel","tracks","flattenTrack","j","mixTrack","mixes","values","sum","num","currentBuffer","index","numberOfMaxBuffers","currentTrack","mix","clear","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","URL","webkitURL","mozURL","fromCharCode","base64","btoa","waves","blob","Blob","createObjectURL","Session","sender","BUFFER_SIZE","receiver","websocket","tls","host","port","openCallback","closeCallback","errorCallback","properties","open","close","error","scheme","charAt","WebSocket","binaryType","onopen","onclose","onerror","onmessage","ArrayBuffer","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","outputLs","outputBuffer","outputRs","destination","isConnected","bufferedAmount","send","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Effector","output","lfo","createOscillator","depth","rate","frequency","noteOn","noteOff","isStop","stopTime","releaseTime","params","toJSON","JSON","stringify","Compressor","compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion","distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","gain","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Wah","lowpass","depthRate","cutoff","resonance","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Autopanner","panner","createStereoPanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPES","sine","square","sawtooth","triangle","Ringmodulator","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","feedback","stage","Flanger","delay","createDelay","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","successCallback","decodeAudioData","preset","timeout","progressCallback","success","progress","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogresss","abort","ERROR_AJAX","onload","status","arrayBuffer","response","decodeSuccessCallback","audioBuffer","decodeErrorCallback","ERROR_DECODE","responseType","Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","positionX","AudioParam","positionY","positionZ","setPosition","orientationX","orientationY","orientationZ","setOrientation","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Listener","listener","forwards","ups","forwardX","forwardY","forwardZ","upX","upY","upZ","EnvelopeGenerator","generators","activeIndexes","activeCounter","AudioNode","activeIndex","useCurve","setValueCurveAtTime","getGenerator","setGenerator","counter","MIN_GAIN","isDisconnect","generator","SoundModule","init","mastervolume","recorder","session","forEach","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","wah","equalizer","autopanner","tremolo","ringmodulator","phaser","flanger","chorus","reverb","envelopegenerator","resize","getBufferSize","install","effector","every","source","connects","on","off","Oscillator","setPeriodicWave","setWaveTable","volume","octave","fine","customs","real","imag","reals","imags","MAX_SIZE","subarray","periodicWave","createPeriodicWave","OCTAVE","detune","Glide","frequencies","LINEAR","EXPONENTIAL","diff","oscillator","OscillatorModule","sources","times","isAnalyser","glide","states","st","sp","processCallback","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","loop","onprogress","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","onended","oneshot","reset","NoiseModule","WHITE_NOISE","PINK_NOISE","BROWNIAN_NOISE","lastOut","random","b0","b1","b2","b3","b4","b5","b6","white","VocalCanceler","dataL","dataR","AudioModule","callbacks","decode","ended","vocalcanceler","duration","toggle","isBuffer","isSource","isPaused","fadeIn","fadeOut","sprites","dataLs","dataRs","keys","reduce","audioBuffers","spritedDataLs","spritedDataRs","createBuffer","copyToChannel","audio","playbackrate","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","loadstart","pause","HTMLMediaElement","channelCount","src","indexOf","Error","position","play","then","pos","catch","Promise","resolve","reject","isMedia","requestPictureInPicture","pictureInPictureEnabled","disablePictureInPicture","pictureInPictureElement","exitPictureInPicture","NoiseGate","level","StreamModule","constraints","video","stream","noisegate","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","isStreaming","MixerModule","ProcessorModule","ScriptProcessorNode","AudioWorkletNode","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","next","done","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","node","isSequences","toABC","mml","X","T","M","L","K","abc","totalDuration","splittedNotes","splittedNote","matches","tuplet","chordLength","restNote","read","file","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","computedIndex","MIN_A","FREQUENCY_RATIO","global","XSound","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","noise","mixer","midi","SAMPLE_RATE","ajax","convertTime","minutes","seconds","milliseconds","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","Event","stopPropagation","dataTransfer","files","target","File","requestFullscreen","Element","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","toFrequencies","toTextFile","string","converted","charCode","charCodeAt","toAscii","resume","clone","clones","C","free","sourceList","noConflict","deep","getCurrentTime"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            // this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            // this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = -1 * (data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = data[i] * (innerHeight / 2);\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class TimeOverview extends Visualizer {\n    static SVG_CURRENT_TIME_CLASS_NAME = 'xsound-svg-current-time';\n    static SVG_SPRITE_CLASS_NAME       = 'xsound-svg-sprite';\n    static DRAG_MODE_UPDATE = 'update';\n    static DRAG_MODE_SPRITE = 'sprite';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(0, 0, 0, 0.5)';         // This style is used for the rectangle that displays current time of audio\n        this.sprite       = 'rgba(255, 255, 255, 0.25)';  // This style is used for the rectangle that displays sprite range\n        this.plotInterval = 0.0625;                       // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                           // Draw text at intervals of this value [sec]\n\n        this.isDown = false;\n\n        this.mode = TimeOverview.DRAG_MODE_UPDATE;  // or 'sprite'\n\n        // for Audio Sprite\n        this.offsetX   = 0;\n        this.startTime = 0;\n        this.endTime   = 0;\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'sprite':\n                    if (value === undefined) {\n                        return this.sprite;\n                    }\n\n                    this.sprite = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                case 'mode':\n                    if (value === undefined) {\n                        return this.mode;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === TimeOverview.DRAG_MODE_UPDATE) || (v === TimeOverview.DRAG_MODE_SPRITE)) {\n                        this.mode = v;\n\n                        // Clear for Audio Sprite\n                        this.offsetX   = 0;\n                        this.startTime = 0;\n                        this.endTime   = 0;\n\n                        if (this.svg instanceof SVGElement) {\n                            const rect = this.svg.querySelector(`.${TimeOverview.SVG_SPRITE_CLASS_NAME}`);\n\n                            if (rect instanceof SVGElement) {\n                                this.svg.removeChild(rect);\n                            }\n                        }\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add(TimeOverview.SVG_CURRENT_TIME_CLASS_NAME);\n\n        rect.setAttribute('y', (this.styles.top + 1));\n        rect.setAttribute('height', (innerHeight - 1));\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill', this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n                        context.fillStyle = this.currentTime;\n                        context.fillRect(this.styles.left, (this.styles.top + 1), x, (innerHeight - 1));\n                    } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n                        if (this.endTime !== 0) {\n                            const baseX = Math.floor(((Math.abs(this.endTime - this.startTime) * this.sampleRate) / this.length) * innerWidth);\n                            context.fillStyle = this.sprite;\n\n                            if (x >= this.offsetX) {\n                                context.fillRect((this.styles.left + this.offsetX), (this.styles.top + 1), baseX, (innerHeight - 1));\n                            } else {\n                                context.fillRect((this.styles.left + this.offsetX - baseX), (this.styles.top + 1), baseX, (innerHeight - 1));\n                            }\n                        }\n\n                        context.fillStyle = this.currentTime;\n\n                        if (x >= this.offsetX) {\n                            context.fillRect((this.styles.left + this.offsetX), (this.styles.top + 1), Math.abs(x - this.offsetX), (innerHeight - 1));\n                        } else {\n                            context.fillRect((this.styles.left + x), (this.styles.top + 1), Math.abs(x - this.offsetX), (innerHeight - 1));\n                        }\n                    }\n                }\n\n                break;\n            case Visualizer.SVG:\n                const rect = this.svg.querySelector(`.${TimeOverview.SVG_CURRENT_TIME_CLASS_NAME}`);\n\n                if (rect instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = ((t * this.sampleRate) / this.length) * innerWidth;\n\n                    if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n                        rect.setAttribute('x', this.styles.left);\n                        rect.setAttribute('width', x);\n                        // rect.setAttribute('transform', `translate(${x} 0)`);\n                        rect.setAttribute('aria-label', 'current time');\n                    } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n                        if (this.endTime !== 0) {\n                            const baseRect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            baseRect.classList.add(TimeOverview.SVG_SPRITE_CLASS_NAME);\n\n                            if (this.svg.lastElementChild.previousElementSibling instanceof SVGElement) {\n                                this.svg.removeChild(this.svg.lastElementChild.previousElementSibling);\n                            }\n\n                            const baseX = Math.floor(((Math.abs(this.endTime - this.startTime) * this.sampleRate) / this.length) * innerWidth);\n\n                            baseRect.setAttribute('y', (this.styles.top + 1));\n                            baseRect.setAttribute('height', rect.getAttribute('height'));\n                            baseRect.setAttribute('stroke', 'none');\n                            baseRect.setAttribute('fill', this.sprite);\n                            baseRect.setAttribute('aria-label', 'current time');\n\n                            if (x >= this.offsetX) {\n                                baseRect.setAttribute('x', (this.styles.left + this.offsetX));\n                            } else {\n                                baseRect.setAttribute('x', (this.styles.left + this.offsetX - baseX));\n                            }\n\n                            baseRect.setAttribute('width', baseX);\n\n                            this.svg.appendChild(baseRect);\n                            this.svg.appendChild(rect);\n                        }\n\n                        if (x >= this.offsetX) {\n                            rect.setAttribute('x', (this.styles.left + this.offsetX));\n                        } else {\n                            rect.setAttribute('x', (this.styles.left + x));\n                        }\n\n                        rect.setAttribute('width', Math.abs(x - this.offsetX));\n                        rect.setAttribute('aria-label', 'sprite time');\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        this.callback = Object.prototype.toString.call(callback) === '[object Function]' ? callback : () => {};\n\n        this.onStart = this.onStart.bind(this);\n        this.onMove  = this.onMove.bind(this);\n        this.onEnd   = this.onEnd.bind(this);\n\n        drawNode.removeEventListener(start, this.onStart, true);\n        drawNode.removeEventListener(move, this.onMove, true);\n        window.removeEventListener(end, this.onEnd, true);\n\n        drawNode.addEventListener(start, this.onStart, true);\n        drawNode.addEventListener(move, this.onMove, true);\n        window.addEventListener(end, this.onEnd, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(event, type, offsetX) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        if ((this.mode === TimeOverview.DRAG_MODE_SPRITE) && ((type === 'mousedown') || (type === 'touchstart'))) {\n            this.offsetX   = x;\n            this.startTime = time;\n            this.endTime   = 0;\n        }\n\n        if ((this.mode === TimeOverview.DRAG_MODE_SPRITE) && ((type === 'mouseup') || (type === 'touchend'))) {\n            this.endTime = time;\n        }\n\n        this.update(time);\n\n        if (this.mode === TimeOverview.DRAG_MODE_UPDATE) {\n            this.callback(event, time);\n        } else if (this.mode === TimeOverview.DRAG_MODE_SPRITE) {\n            if (this.startTime < time) {\n                this.callback(event, this.startTime, time);\n            } else if (this.startTime > time) {\n                this.callback(event, time, this.startTime);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onStart(event) {\n        this.draw(event, event.type, this.getOffsetX(event));\n        this.isDown = true;\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onMove(event) {\n        if (!this.isDown) {\n            return;\n        }\n\n        event.preventDefault();  // for Touch Panel\n        this.draw(event, event.type, this.getOffsetX(event));\n    }\n\n    /**\n     * This method is event listener for drawing the rectangle.\n     * @param {Event} event This argument is the instance of `Event`.\n     */\n    onEnd(event) {\n        if (!this.isDown) {\n            return;\n        }\n\n        this.draw(event, event.type, this.getOffsetX(event));\n\n        this.isDown = false;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = (0.5 - (data[i] / 255)) * innerHeight;\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((data[i] / 255) - 0.5) * innerHeight;\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * ((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport { TimeOverview } from './TimeOverview';\nimport { Time } from './Time';\nimport { FFT } from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method flats recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @param {number} track This argument is track number.\n     * @return {Float32Array} This is returned as array for flatten sound.\n     */\n    flatTrack(channel, track) {\n        if (!this.isTrack(track)) {\n            return null;\n        }\n\n        const tracks     = this[`track${channel}s`][track];\n        const bufferSize = this.processor.bufferSize;\n\n        const flattenTrack = new Float32Array(tracks.length * bufferSize);\n\n        for (let i = 0, len = tracks.length; i < len; i++) {\n            for (let j = 0; j < bufferSize; j++) {\n                flattenTrack[(i * bufferSize) + j] = tracks[i][j];\n            }\n        }\n\n        return flattenTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @param {string} type This argument is one of 'blob', 'objecturl', 'base64', 'dataurl'.\n     * @return {Blob|string} This is returned as `Blob` or Object URL or Base64 or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit, type) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else if (this.isTrack(track)) {\n            soundLs = this.flatTrack('L', track);\n            soundRs = this.flatTrack('R', track);\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        const t = String(type).toLowerCase();\n\n        switch (t) {\n            case 'base64' :\n            case 'dataurl':\n                let wave = '';\n\n                wave += 'RIFF';\n                wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n                wave += 'WAVE';\n\n                // fmt chunk\n                wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n                wave += String.fromCharCode(1, 0);\n\n                // fmt chunk -> Channels (Monaural or Stereo)\n                wave += String.fromCharCode(CHANNEL, 0);\n\n                // fmt chunk -> Sample rate\n                wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n                // fmt chunk -> Byte per second\n                wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n                // fmt chunk -> Block size\n                wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n                // fmt chunk -> Byte per Sample\n                wave += String.fromCharCode(QBIT, 0);\n\n                // data chunk\n                wave += 'data';\n                wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n                for (let i = 0; i < SIZE; i++) {\n                    switch (QBIT) {\n                        case  8:\n                            wave += String.fromCharCode(sounds[i]);\n                            break;\n                        case 16:\n                            // The byte order in WAVE file is little endian\n                            wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                const base64 = window.btoa(wave);\n\n                if (t === 'base64') {\n                    return base64;\n                }\n\n                return `data:audio/wav;base64,${base64}`;\n            case 'blob'     :\n            case 'objecturl':\n            default         :\n                const waves = [];\n\n                waves[0] = 0x52;  // 'R'\n                waves[1] = 0x49;  // 'I'\n                waves[2] = 0x46;  // 'F'\n                waves[3] = 0x46;  // 'F'\n\n                waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n                waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n                waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n                waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n                waves[8]  = 0x57;  // 'W'\n                waves[9]  = 0x41;  // 'A'\n                waves[10] = 0x56;  // 'V'\n                waves[11] = 0x45;  // 'E'\n\n                // fmt chunk\n                waves[12] = 0x66;  // 'f'\n                waves[13] = 0x6D;  // 'm'\n                waves[14] = 0x74;  // 't'\n                waves[15] = 0x20;  // ' '\n\n                waves[16] = 16;\n                waves[17] =  0;\n                waves[18] =  0;\n                waves[19] =  0;\n\n                waves[20] = 1;\n                waves[21] = 0;\n\n                // fmt chunk -> Channels (Monaural or Stereo)\n                waves[22] = CHANNEL;\n                waves[23] = 0;\n\n                // fmt chunk -> Sample rate\n                waves[24] = (RATE >>  0) & 0xFF;\n                waves[25] = (RATE >>  8) & 0xFF;\n                waves[26] = (RATE >> 16) & 0xFF;\n                waves[27] = (RATE >> 24) & 0xFF;\n\n                // fmt chunk -> Byte per second\n                waves[28] = (BPS >>  0) & 0xFF;\n                waves[29] = (BPS >>  8) & 0xFF;\n                waves[30] = (BPS >> 16) & 0xFF;\n                waves[31] = (BPS >> 24) & 0xFF;\n\n                // fmt chunk -> Block size\n                waves[32] = CHANNEL * (QBIT / 8);\n                waves[33] = 0;\n\n                // fmt chunk -> Byte per Sample\n                waves[34] = QBIT;\n                waves[35] = 0;\n\n                // data chunk\n                waves[36] = 0x64;  // 'd'\n                waves[37] = 0x61;  // 'a'\n                waves[38] = 0x74;  // 't\n                waves[39] = 0x61;  // 'a'\n\n                waves[40] = (DATA_SIZE >>  0) & 0xFF;\n                waves[41] = (DATA_SIZE >>  8) & 0xFF;\n                waves[42] = (DATA_SIZE >> 16) & 0xFF;\n                waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n                for (let i = 0; i < SIZE; i++) {\n                    switch (QBIT) {\n                        case  8:\n                            waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                            break;\n                        case 16:\n                            // The byte order in WAVE file is little endian\n                            waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                            waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                const blob = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n\n                if (t === 'blob') {\n                    return blob;\n                }\n\n                return window.URL.createObjectURL(blob);\n        }\n\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport class Session {\n    static BUFFER_SIZE = 2048;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        // HACK: Fix buffer size on different environments\n        this.sender   = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport { Effector }  from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        if ((this.panner.positionX instanceof AudioParam) && (this.panner.positionY instanceof AudioParam) && (this.panner.positionZ instanceof AudioParam)) {\n            this.panner.positionX.setValueAtTime(this.positions.x, context.currentTime);\n            this.panner.positionY.setValueAtTime(this.positions.y, context.currentTime);\n            this.panner.positionZ.setValueAtTime(this.positions.z, context.currentTime);\n        } else {\n            this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        }\n\n        if ((this.panner.orientationX instanceof AudioParam) && (this.panner.orientationY instanceof AudioParam) && (this.panner.orientationZ instanceof AudioParam)) {\n            this.panner.orientationX.setValueAtTime(this.orientations.x, context.currentTime);\n            this.panner.orientationY.setValueAtTime(this.orientations.y, context.currentTime);\n            this.panner.orientationZ.setValueAtTime(this.orientations.z, context.currentTime);\n        } else {\n            this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n        }\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n\n                        if ((this.panner.positionX instanceof AudioParam) && (this.panner.positionY instanceof AudioParam) && (this.panner.positionZ instanceof AudioParam)) {\n                            this.panner.positionX.setValueAtTime(this.positions.x, this.context.currentTime);\n                            this.panner.positionY.setValueAtTime(this.positions.y, this.context.currentTime);\n                            this.panner.positionZ.setValueAtTime(this.positions.z, this.context.currentTime);\n                        } else {\n                            this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                        }\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n\n                        if ((this.panner.orientationX instanceof AudioParam) && (this.panner.orientationY instanceof AudioParam) && (this.panner.orientationZ instanceof AudioParam)) {\n                            this.panner.orientationX.setValueAtTime(this.orientations.x, this.context.currentTime);\n                            this.panner.orientationY.setValueAtTime(this.orientations.y, this.context.currentTime);\n                            this.panner.orientationZ.setValueAtTime(this.orientations.z, this.context.currentTime);\n                        } else {\n                            this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                        }\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v >= 0) && (v <= 360)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if ((v >= 0) && (v <= 360)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if ((v >= 0) && (v <= 1)) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Listener extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.forwards  = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        if ((this.listener.positionX instanceof AudioParam) && (this.listener.positionY instanceof AudioParam) && (this.listener.positionZ instanceof AudioParam)) {\n            this.listener.positionX.setValueAtTime(this.positions.x, context.currentTime);\n            this.listener.positionY.setValueAtTime(this.positions.y, context.currentTime);\n            this.listener.positionZ.setValueAtTime(this.positions.z, context.currentTime);\n        } else {\n            this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        }\n\n        if ((this.listener.forwardX instanceof AudioParam)\n            && (this.listener.forwardY instanceof AudioParam)\n            && (this.listener.forwardZ instanceof AudioParam)\n            && (this.listener.upX instanceof AudioParam)\n            && (this.listener.upY instanceof AudioParam)\n            && (this.listener.upZ instanceof AudioParam)) {\n            this.listener.forwardX.setValueAtTime(this.forwards.x, context.currentTime);\n            this.listener.forwardY.setValueAtTime(this.forwards.y, context.currentTime);\n            this.listener.forwardZ.setValueAtTime(this.forwards.z, context.currentTime);\n            this.listener.upX.setValueAtTime(this.ups.x, context.currentTime);\n            this.listener.upY.setValueAtTime(this.ups.y, context.currentTime);\n            this.listener.upZ.setValueAtTime(this.ups.z, context.currentTime);\n        } else {\n            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n        }\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n\n                        if ((this.listener.positionX instanceof AudioParam) && (this.listener.positionY instanceof AudioParam) && (this.listener.positionZ instanceof AudioParam)) {\n                            this.listener.positionX.setValueAtTime(this.positions.x, this.context.currentTime);\n                            this.listener.positionY.setValueAtTime(this.positions.y, this.context.currentTime);\n                            this.listener.positionZ.setValueAtTime(this.positions.z, this.context.currentTime);\n                        } else {\n                            this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                        }\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.forwards[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.forwards[k.charAt(1)] = v;\n\n                        if ((this.listener.forwardX instanceof AudioParam)\n                            && (this.listener.forwardY instanceof AudioParam)\n                            && (this.listener.forwardZ instanceof AudioParam)\n                            && (this.listener.upX instanceof AudioParam)\n                            && (this.listener.upY instanceof AudioParam)\n                            && (this.listener.upZ instanceof AudioParam)) {\n                            this.listener.forwardX.setValueAtTime(this.forwards.x, this.context.currentTime);\n                            this.listener.forwardY.setValueAtTime(this.forwards.y, this.context.currentTime);\n                            this.listener.forwardZ.setValueAtTime(this.forwards.z, this.context.currentTime);\n                            this.listener.upX.setValueAtTime(this.ups.x, this.context.currentTime);\n                            this.listener.upY.setValueAtTime(this.ups.y, this.context.currentTime);\n                            this.listener.upZ.setValueAtTime(this.ups.z, this.context.currentTime);\n                        } else {\n                            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n                        }\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n\n                        if ((this.listener.forwardX instanceof AudioParam)\n                            && (this.listener.forwardY instanceof AudioParam)\n                            && (this.listener.forwardZ instanceof AudioParam)\n                            && (this.listener.upX instanceof AudioParam)\n                            && (this.listener.upY instanceof AudioParam)\n                            && (this.listener.upZ instanceof AudioParam)) {\n                            this.listener.forwardX.setValueAtTime(this.forwards.x, this.context.currentTime);\n                            this.listener.forwardY.setValueAtTime(this.forwards.y, this.context.currentTime);\n                            this.listener.forwardZ.setValueAtTime(this.forwards.z, this.context.currentTime);\n                            this.listener.upX.setValueAtTime(this.ups.x, this.context.currentTime);\n                            this.listener.upY.setValueAtTime(this.ups.y, this.context.currentTime);\n                            this.listener.upZ.setValueAtTime(this.ups.z, this.context.currentTime);\n                        } else {\n                            this.listener.setOrientation(this.forwards.x, this.forwards.y, this.forwards.z, this.ups.x, this.ups.y, this.ups.z);\n                        }\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'positions' : this.positions,\n            'forwards'  : this.forwards,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        if ((input instanceof AudioNode) && (output instanceof AudioNode)) {\n            input.connect(this.generators[i]);\n            this.generators[i].connect(output);\n        } else if (input instanceof AudioNode) {\n            input.connect(this.generators[i]);\n        } else if (output instanceof AudioNode) {\n            this.generators[i].connect(output);\n        }\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @param {boolean} useCurve This argument is to use different methods.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime, useCurve) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            // NOTE: https://www.w3.org/TR/webaudio/#dom-audioparam-settargetattime\n            if (useCurve) {\n                this.generators[activeIndex].gain.setValueCurveAtTime(new Float32Array([1, 0.5, 0.25, 0]), t3, t4);\n            } else {\n                this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\nimport { Analyser } from './Analyser';\nimport { Recorder } from './Recorder';\nimport { Session } from './Session';\nimport { Effector } from './Effectors/Effector';\nimport { Compressor } from './Effectors/Compressor';\nimport { Distortion } from './Effectors/Distortion';\nimport { Wah } from './Effectors/Wah';\nimport { Equalizer } from './Effectors/Equalizer';\nimport { Filter } from './Effectors/Filter';\nimport { Autopanner } from './Effectors/Autopanner';\nimport { AutopannerFallback } from './Effectors/AutopannerFallback';\nimport { Tremolo } from './Effectors/Tremolo';\nimport { Ringmodulator } from './Effectors/Ringmodulator';\nimport { Phaser } from './Effectors/Phaser';\nimport { Flanger } from './Effectors/Flanger';\nimport { Chorus } from './Effectors/Chorus';\nimport { Delay } from './Effectors/Delay';\nimport { Reverb } from './Effectors/Reverb';\nimport { Panner } from './Effectors/Panner';\nimport { Listener } from './Effectors/Listener';\nimport { EnvelopeGenerator } from './Effectors/EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`, `ProcessorModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.init(context, bufferSize);\n    }\n\n    /**\n     * This method initials modules.\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    init(context, bufferSize) {\n        if (Array.isArray(this.modules) && (this.modules.length > 0)) {\n            this.mastervolume.disconnect(0);\n            this.mastervolume = null;\n\n            this.processor.disconnect(0);\n            this.processor = null;\n\n            this.analyser.input.disconnect(0);\n            this.analyser = null;\n\n            this.recorder.processor.disconnect(0);\n            this.recorder = null;\n\n            this.session.sender.disconnect(0);\n            this.session  = null;\n\n            this.modules.forEach(module => {\n                module.input.disconnect(0);\n                module.output.disconnect(0);\n                module = null;\n            });\n\n            this.modules = [];\n        }\n\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        let size = parseInt(bufferSize, 10);\n\n        switch (size) {\n            case   256:\n            case   512:\n            case  1024:\n            case  2048:\n            case  4096:\n            case  8192:\n            case 16384:\n                break;\n            default:\n                size = 0;\n                break;\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, size);\n        this.distortion        = new Distortion(context, size);\n        this.wah               = new Wah(context, size);\n        this.equalizer         = new Equalizer(context, size);\n        this.filter            = new Filter(context, size);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, size) : new AutopannerFallback(context, size);\n        this.tremolo           = new Tremolo(context, size);\n        this.ringmodulator     = new Ringmodulator(context, size);\n        this.phaser            = new Phaser(context, size);\n        this.flanger           = new Flanger(context, size);\n        this.chorus            = new Chorus(context, size);\n        this.delay             = new Delay(context, size);\n        this.reverb            = new Reverb(context, size);\n        this.panner            = new Panner(context, size);\n        this.listener          = new Listener(context, size);\n        this.envelopegenerator = new EnvelopeGenerator(context);\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 0, 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.init(this.context, bufferSize);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method installs customized effector.\n     * @param {string} name This argument is in order to select effector.\n     * @param {Effector} effector This argument is the subclass that extends `Effector` class.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    install(name, effector) {\n        if (!(effector instanceof Effector)) {\n            return this;\n        }\n\n        if (String(name) in this) {\n            return this;\n        }\n\n        this[name] = effector;\n\n        if (this.modules.every(module => module !== effector)) {\n            this.modules.push(effector);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                return this[m];  // Installed effector\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effector's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effector's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { Oscillator } from './Oscillator';\nimport { Glide } from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        if (source.loop) {\n            source.start(startTime, (startTime + source.loopStart), (source.loopEnd - startTime));\n        } else {\n            source.start(startTime);\n        }\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule }  from '../SoundModule';\n\nexport class NoiseModule extends SoundModule {\n    static WHITE_NOISE    = 'whitenoise';\n    static PINK_NOISE     = 'pinknoise';\n    static BROWNIAN_NOISE = 'browniannoise';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.type = NoiseModule.WHITE_NOISE;\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|NoiseModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = '';\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === NoiseModule.WHITE_NOISE) || (v === NoiseModule.PINK_NOISE) || (v === NoiseModule.BROWNIAN_NOISE)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        const bufferSize = this.processor.bufferSize;\n\n        let lastOut = 0;\n\n        this.processor.onaudioprocess = event => {\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            if (this.envelopegenerator.isStop()) {\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n            } else {\n                switch (this.type) {\n                    case NoiseModule.WHITE_NOISE:\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = 2 * (Math.random() - 0.5);\n                            outputRs[i] = 2 * (Math.random() - 0.5);\n                        }\n\n                        break;\n                    case NoiseModule.PINK_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        let b0 = 0;\n                        let b1 = 0;\n                        let b2 = 0;\n                        let b3 = 0;\n                        let b4 = 0;\n                        let b5 = 0;\n                        let b6 = 0;\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            b0 = (0.99886 * b0) + (white * 0.0555179);\n                            b1 = (0.99332 * b1) + (white * 0.0750759);\n                            b2 = (0.96900 * b2) + (white * 0.1538520);\n                            b3 = (0.86650 * b3) + (white * 0.3104856);\n                            b4 = (0.55000 * b4) + (white * 0.5329522);\n                            b5 = (-0.7616 * b5) - (white * 0.0168980);\n\n                            outputLs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n                            outputRs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n\n                            outputLs[i] *= 0.11;\n                            outputRs[i] *= 0.11;\n\n                            b6 = white * 0.115926;\n                        }\n\n                        break;\n                    case NoiseModule.BROWNIAN_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            outputLs[i] = (lastOut + (0.02 * white)) / 1.02;\n                            outputRs[i] = (lastOut + (0.02 * white)) / 1.02;\n\n                            lastOut = (lastOut + (0.02 * white)) / 1.02;\n\n                            outputLs[i] *= 3.5;\n                            outputRs[i] *= 3.5;\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[NoiseModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { VocalCanceler } from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        this.envelopegenerator.setGenerator(0);\n        this.envelopegenerator.param({\n            'attack'  : 0,\n            'decay'   : 0.01,\n            'sustain' : 1,\n            'release' : 0.01\n        });\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n\n                        const startTime   = this.context.currentTime;\n                        const currentTime = this.param('currentTime');\n                        const duration    = this.param('duration');\n\n                        this.envelopegenerator.start(startTime);\n                        this.envelopegenerator.stop((startTime + ((duration - currentTime) / v)), true);\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} startTime This argument is the time that audio is started at. The default value is 0.\n     * @param {number} endTime This argument is the time that audio is ended at. The default value is audio duration.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(startTime, endTime, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            // This value is `AudioContext#currentTime`\n            const currentTime = this.context.currentTime;\n\n            const start = parseFloat(startTime);\n            const end   = parseFloat(endTime);\n\n            if (end >= 0) {\n                this.currentTime = ((start >= 0) && (start <= end)) ? start : 0;\n            } else {\n                this.currentTime = ((start >= 0) && (start <= this.buffer.duration)) ? start : 0;\n            }\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n            this.source.loopStart          = this.currentTime;\n            this.source.loopEnd            = (end >= 0) ? end : this.buffer.duration;\n\n            // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.envelopegenerator.ready(0, this.source, this.processor);\n            this.connect(this.processor, connects);\n\n            if (end >= 0) {\n                this.source.start(currentTime, this.currentTime, (end - start));\n            } else {\n                this.source.start(currentTime, this.currentTime, (this.buffer.duration - this.currentTime));\n            }\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.envelopegenerator.start(currentTime);\n\n            if (end >= 0) {\n                this.envelopegenerator.stop((currentTime + ((end - start) / this.source.playbackRate.value)), true);\n            } else {\n                this.envelopegenerator.stop((currentTime + ((this.buffer.duration - start) / this.source.playbackRate.value)), true);\n            }\n\n            this.on(currentTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.loopEnd)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            this.callbacks.update(this.source, this.currentTime);\n                        }\n\n                        if (this.analyser.timeOverviewL.param('mode') === 'update') {\n                            this.analyser.timeOverviewL.update(this.currentTime);\n                        }\n\n                        if (this.analyser.timeOverviewR.param('mode') === 'update') {\n                            this.analyser.timeOverviewR.update(this.currentTime);\n                        }\n                    } else {\n                        if (this.source.loop) {\n                            this.stop();\n\n                            if ((this.analyser.timeOverviewL.param('mode') === 'sprite') || (this.analyser.timeOverviewR.param('mode') === 'sprite')) {\n                                this.start(this.source.loopStart, this.source.loopEnd, connects, processCallback);\n                            } else {\n                                this.start(0, this.buffer.duration, connects, processCallback);\n                            }\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} startTime This argument is the time that audio is started at. The default value is 0.\n     * @param {number} endTime This argument is the time that audio is ended at. The default value is audio duration.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(startTime, endTime, connects, processCallback) {\n        if (this.paused) {\n            this.start(startTime, endTime, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /**\n     * This method is getter or setter for fade-in time.\n     * @param {number} time This argument is fade-in time. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as fade-in time. Otherwise, this is returned for method chain.\n     */\n    fadeIn(time) {\n        if (time === undefined) {\n            return this.envelopegenerator.param('attack');\n        }\n\n        this.envelopegenerator.param('attack', time);\n\n        const startTime    = this.context.currentTime;\n        const currentTime  = this.param('currentTime');\n        const duration     = this.param('duration');\n        const playbackRate = this.param('playbackRate');\n\n        this.envelopegenerator.start(startTime);\n        this.envelopegenerator.stop((startTime + ((duration - currentTime) / playbackRate)), true);\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for fade-out time.\n     * @param {number} time This argument is fade-out time. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as fade-out time. Otherwise, this is returned for method chain.\n     */\n    fadeOut(time) {\n        if (time === undefined) {\n            return this.envelopegenerator.param('release');\n        }\n\n        this.envelopegenerator.param('release', time);\n\n        const startTime    = this.context.currentTime;\n        const currentTime  = this.param('currentTime');\n        const duration     = this.param('duration');\n        const playbackRate = this.param('playbackRate');\n\n        this.envelopegenerator.start(startTime);\n        this.envelopegenerator.stop((startTime + ((duration - currentTime) / playbackRate)), true);\n\n        return this;\n    }\n\n    /**\n     *  This method sprites audio.\n     *  @param {object} sprites This argument is the associative array that contains sprite times.\n     *  @return {object} This is returned as the associative array that contains sprited `AudioBuffer`.\n     */\n    sprite(sprites) {\n        if (!this.isBuffer()) {\n            return null;\n        }\n\n        if (Object.prototype.toString.call(sprites) !== '[object Object]') {\n            return null;\n        }\n\n        let dataLs = null;\n        let dataRs = null;\n\n        if (this.buffer.numberOfChannels > 0) {\n            dataLs = this.buffer.getChannelData(0);\n        }\n\n        if (this.buffer.numberOfChannels > 1) {\n            dataRs = this.buffer.getChannelData(1);\n        }\n\n        return Object.keys(sprites).reduce((audioBuffers, key) => {\n            const times = sprites[key];\n\n            if (!Array.isArray(times) || (times.length !== 2)) {\n                return;\n            }\n\n            const sampleRate = this.buffer.sampleRate;\n            const start      = parseInt((times[0] * sampleRate), 10);\n            const end        = parseInt((times[1] * sampleRate), 10);\n            const length     = end - start;\n\n            if (isNaN(length) || (length <= 0)) {\n                return null;\n            }\n\n            let spritedDataLs = null;\n            let spritedDataRs = null;\n            let buffer        = null;\n\n            switch (this.buffer.numberOfChannels) {\n                case 1:\n                    spritedDataLs = new Float32Array(length);\n\n                    for (let i = start; i < end; i++) {\n                        spritedDataLs[i - start] = dataLs[i];\n                    }\n\n                    buffer = this.context.createBuffer(1, length, sampleRate);\n\n                    buffer.copyToChannel(spritedDataLs, 0);\n\n                    audioBuffers[key] = buffer;\n\n                    return audioBuffers;\n                case 2:\n                    spritedDataLs = new Float32Array(length);\n                    spritedDataRs = new Float32Array(length);\n\n                    for (let i = start; i < end; i++) {\n                        spritedDataLs[i - start] = dataLs[i];\n                        spritedDataRs[i - start] = dataRs[i];\n                    }\n\n                    buffer = this.context.createBuffer(2, length, sampleRate);\n\n                    buffer.copyToChannel(spritedDataLs, 0);\n                    buffer.copyToChannel(spritedDataRs, 1);\n\n                    audioBuffers[key] = buffer;\n\n                    return audioBuffers;\n                default:\n                    return {};\n            }\n        }, {});\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport { AudioModule }  from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        this.envelopegenerator.setGenerator(0);\n        this.envelopegenerator.param({\n            'attack'  : 0,\n            'decay'   : 0.01,\n            'sustain' : 1,\n            'release' : 0.01\n        });\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        if (this.autoplay) {\n            this.stop(() => this.start(this.media.currentTime), () => {});\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n\n                        const startTime   = this.context.currentTime;\n                        const currentTime = this.param('currentTime');\n                        const duration    = this.param('duration');\n\n                        this.envelopegenerator.start(startTime);\n                        this.envelopegenerator.stop((startTime + ((duration - currentTime) / v)), true);\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n\n                            const startTime    = this.context.currentTime;\n                            const duration     = this.param('duration');\n                            const playbackRate = this.param('playbackRate');\n\n                            this.envelopegenerator.start(startTime);\n                            this.envelopegenerator.stop((startTime + ((duration - v) / playbackRate)), true);\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media && this.media.duration ? this.media.duration : 0;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1) || (this.ext === '')) {\n                this.media.src = src;  // `Data URL` or `Object URL` or Full path\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> GainNode (Envelope Generator) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.envelopegenerator.ready(0, this.source, this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const startTime = this.context.currentTime;\n\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.envelopegenerator.start(startTime);\n                this.envelopegenerator.stop((startTime + ((this.media.duration - pos) / this.media.playbackRate)), true);\n\n                this.on(startTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop(() => {\n                    if (this.autoplay) {\n                        this.media.muted  = this.muted = true;\n                        this.media.volume = 0;\n                    }\n\n                    this.start(position, connects, processCallback);\n                }, () => {\n                });\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @param {function} successCallback This argument is invoked when `HTMLMediaElement#play` is successful.\n     * @param {function} errorCallback This argument is invoked when `HTMLMediaElement#play` is failure.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop(successCallback, errorCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            // ref: https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\n            this.media.play()\n                .then(() => {\n                    this.media.pause();\n\n                    this.off(this.context.currentTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n\n                    if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                        successCallback();\n                    }\n\n                    return Promise.resolve();\n                })\n                .catch(error => {\n                    if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                        errorCallback(error);\n                    }\n\n                    return Promise.reject(error);\n                });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /**\n     * This method requests Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    requestPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media === document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return this.media.requestPictureInPicture();\n    }\n\n    /**\n     * This method exits from Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    exitPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media !== document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return document.exitPictureInPicture();\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { NoiseGate }  from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\nimport { AudioModule } from '../AudioModule';\nimport { MediaModule } from '../MediaModule';\nimport { StreamModule } from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\nexport class ProcessorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method sets the instance of `ScriptProcessorNode` or `AudioWorkletNode`.\n     * @param {ScriptProcessorNode|AudioWorkletNode} processor This argument is the instance of `ScriptProcessorNode` or `AudioWorkletNode`.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    setup(processor) {\n        if ((processor instanceof ScriptProcessorNode) || (processor instanceof AudioWorkletNode)) {\n            this.processor = processor;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts `onaudioprocess` event in the instance of `ScriptProcessorNode`.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    start(processCallback, connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    /**\n     * This method stops `onaudioprocess` event in the instance of `ScriptProcessorNode`.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessodNode`.\n     * @return {ProcessorModule} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[ProcessorModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport class MML {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n    static FREQUENCY_RATIO   = Math.pow(2, (1 / 12));  // about 1.059463\n    static MIN_A             = 27.5;\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => (index >= 0) ? (MML.MIN_A * Math.pow(MML.FREQUENCY_RATIO, index)) : -1;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.offset = 0;\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @param {number} offset This argument is in order to correct the index of one-shot audio.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls, offset) {\n        this.offset = parseInt(offset, 10);\n\n        if (isNaN(this.offset) || (this.offset < 0)) {\n            this.offset = 0;\n        }\n\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop,\n                        'note'        : note\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                this.callbacks.start(sequence);\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n                this.callbacks.start(sequence);\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start((sequence.indexes[i] + this.offset), connects, processCallback);\n                    }\n                }\n\n                this.callbacks.start(sequence, this.offset);\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    this.callbacks.stop(sequence);\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n                    this.callbacks.stop(sequence);\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop((sequence.indexes[i] + this.offset), processCallback);\n                        }\n                    }\n\n                    this.callbacks.stop(sequence, this.offset);\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            this.callbacks.stop(sequence);\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n            this.callbacks.stop(sequence);\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop((index + this.offset), processCallback);\n                }\n            }\n\n            this.callbacks.stop(sequence, this.offset);\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method converts MML to ABC Notation.\n     * @param {string} mml This argument is MML string.\n     * @param {number} X This argument is file number in ABC Notation.\n     * @param {string} T This argument is title in ABC Notation.\n     * @param {string} M This argument is beat in ABC Notation.\n     * @param {string} L This argument is note duration in ABC Notation.\n     * @param {string} K This argument is tone in ABC Notation.\n     * @return {string} This is returned as ABC Notation.\n     */\n    toABC(mml, X, T, M, L, K) {\n        let abc = '';\n\n        abc += `X:${X ? X : 1}\\n`;\n        abc += `T:${T ? T : ''}\\n`;\n        abc += `M:${M ? M : '4/4'}\\n`;\n        abc += `L:${L ? L : '1/256'}\\n`;\n        abc += `K:${K ? K : ''}\\n`;\n\n        const notes = mml.match(MML.REGEXP_MML);\n\n        if (notes === null) {\n            return abc;\n        }\n\n        let octave        = null;\n        let totalDuration = 0;\n\n        while (notes.length > 0) {\n            const note = notes.shift().trim();\n\n            if (MML.REGEXP_TEMPO.test(note)) {\n                const Q = parseInt(note.slice(1), 10);\n\n                if (Q > 0) {\n                    abc += `Q:1/4=${Q}\\n`;\n                } else {\n                    return abc;\n                }\n            } else if (MML.REGEXP_OCTAVE.test(note)) {\n                octave = parseInt(note.slice(1), 10);\n\n                if (octave < 0) {\n                    return abc;\n                }\n            } else if (MML.REGEXP_NOTE.test(note)) {\n                if (octave === null) {\n                    return abc;\n                }\n\n                let splittedNotes = null;\n\n                if (note.indexOf('&') === -1) {\n                    splittedNotes = [note];\n                } else {\n                    splittedNotes = note.split('&');\n                }\n\n                let chord = '';\n\n                while (splittedNotes.length > 0) {\n                    const splittedNote = splittedNotes.shift();\n\n                    const duration = parseInt(splittedNote.replace(/^.+?(\\d+)\\.*$/, '$1'), 10);\n\n                    let n = '';\n                    let d = 0;\n\n                    switch (duration) {\n                        case 1:\n                            n = splittedNote.replace('1', '256');\n                            break;\n                        case 2:\n                            n = splittedNote.replace('2', '128');\n                            break;\n                        case 4:\n                            n = splittedNote.replace('4', '64');\n                            break;\n                        case 8:\n                            n = splittedNote.replace('8', '32');\n                            break;\n                        case 16:\n                            n = splittedNote.replace('16', '16');\n                            break;\n                        case 32:\n                            n = splittedNote.replace('32', '8');\n                            break;\n                        case 64:\n                            n = splittedNote.replace('64', '4');\n                            break;\n                        case 128:\n                            n = splittedNote.replace('128', '2');\n                            break;\n                        case 256:\n                            n = splittedNote.replace('256', '1');\n                            break;\n                        // Tuplet\n                        case 6:\n                            n = `(3${splittedNote.replace('6', '128')}`;\n                            d = 128 / 3;\n                            break;\n                        case 12:\n                            n = `(3${splittedNote.replace('12', '64')}`;\n                            d = 64 / 3;\n                            break;\n                        case 18:\n                            n = `(9${splittedNote.replace('18', '128')}`;\n                            d = 128 / 9;\n                            break;\n                        case 24:\n                            n = `(3${splittedNote.replace('24', '32')}`;\n                            d = 32 / 3;\n                            break;\n                        case 36:\n                            n = `(9${splittedNote.replace('36', '64')}`;\n                            d = 64 / 9;\n                            break;\n                        case 48:\n                            n = `(3${splittedNote.replace('48', '16')}`;\n                            d = 16 / 3;\n                            break;\n                        case 72:\n                            n = `(9${splittedNote.replace('72', '32')}`;\n                            d = 32 / 9;\n                            break;\n                        case 96:\n                            n = `(3${splittedNote.replace('96', '8')}`;\n                            d = 8 / 3;\n                            break;\n                        case 144:\n                            n = `(9${splittedNote.replace('144', '16')}`;\n                            d = 16 / 9;\n                            break;\n                        case 192:\n                            n = `(3${splittedNote.replace('192', '4')}`;\n                            d = 4 / 3;\n                            break;\n                        default:\n                            return abc;\n                    }\n\n                    if (n.indexOf('.') !== -1) {\n                        n = n.replace(/^(.+?)\\d+\\.+$/, `$1${1.5 * parseInt(n.replace(/^.+?(\\d+)\\.+$/, '$1'), 10)}`);\n                    }\n\n                    if (n.indexOf('(') === -1) {\n                        totalDuration += parseInt(n.replace(/^.+?(\\d+)\\.*$/i, '$1'), 10);\n                    } else {\n                        totalDuration += d;\n                    }\n\n                    if (totalDuration >= 256) {\n                        n += ' | ';\n                        totalDuration = 0;\n                    }\n\n                    if (/R/i.test(n)) {\n                        abc += `${n} `;\n                        continue;\n                    }\n\n                    let o = '';\n\n                    switch (octave) {\n                        case 0:\n                            o = ',,,,';\n                            break;\n                        case 1:\n                            o = ',,,';\n                            break;\n                        case 2:\n                            o = ',,';\n                            break;\n                        case 3:\n                            o = ',';\n                            break;\n                        case 5:\n                            o = '\\'';\n                            break;\n                        case 6:\n                            o = '\\'\\'';\n                            break;\n                        case 7:\n                            o = '\\'\\'\\'';\n                            break;\n                        case 4 :\n                        default:\n                            break;\n                    }\n\n                    const matches = n.match(/^(\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i);\n\n                    if (matches === null) {\n                        return abc;\n                    }\n\n                    const tuplet      = matches[1] ? matches[1] : '';\n                    const chordLength = matches[2].length;\n                    const restNote    = matches[3] ? matches[3] : '';\n\n                    let start = 0;\n\n                    if (tuplet.length > 0) {\n                        n = n.replace(/^(?:\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i, '$1$2');\n                    }\n\n                    if (chordLength === 1) {\n                        chord += `${tuplet}${n.slice(0, 1)}${o}${restNote}`;\n                    } else if ((chordLength === 2) && /[#+-]/.test(n.charAt(1))) {\n                        chord += `${tuplet}${n.slice(1, 2)}${n.slice(0, 1)}${o}${restNote}`;\n                    } else {\n                        while (start < chordLength) {\n                            if (start === 0) {\n                                chord += `${tuplet}[`;\n                            }\n\n                            if (/[#+-]/.test(n.charAt(start + 1))) {\n                                chord += `${n.slice((start + 1), (start + 2))}${n.slice(start, (start + 1))}${o}`;\n                                start += 2;\n                            } else {\n                                chord += `${n.slice(start, (start + 1))}${o}`;\n                                start++;\n                            }\n\n                            if (start === chordLength) {\n                                chord += `]${restNote}`;\n                            }\n                        }\n                    }\n\n                    if (splittedNotes.length > 0) {\n                        chord += '&';\n                    } else {\n                        abc += `${chord} `;\n                    }\n                }\n            }\n        }\n\n        return abc.replace(/R/gi, 'z')\n                  .replace(/[#+]/g, '^')\n                  .replace(/-/g, '_')\n                  .replace(/&/g, '-')\n                  .replace(/\\s{2}/g, ' ');\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {type} string This argument is response type that is one of 'text', 'arraybuffer', 'blob', 'document', 'json'. The default value is 'arraybuffer'.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, type, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if ((xhr.status === 200) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n            successCallback(event, xhr.response);\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = /text|arraybuffer|blob|document|json/.test(String(type).toLowerCase()) ? String(type).toLowerCase() : 'arraybuffer';\n    xhr.send(null);\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function exitFullscreen() {\n    if (document.exitFullscreen) {\n        return document.exitFullscreen();\n    }\n\n    if (document.webkitCancelFullScreen) {\n        return document.webkitCancelFullScreen();\n    }\n\n    if (document.mozCancelFullScreen) {\n        return document.mozCancelFullScreen();\n    }\n\n    if (document.msExitFullscreen) {\n        return document.msExitFullscreen();\n    }\n\n    if (document.cancelFullScreen) {\n        return document.cancelFullScreen();\n    }\n\n    return Promise.reject('Cannot exit from full screen.');\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'ObjectURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File|ObjectURL} This is returned as the instance of `File` (extends `Blob`) or Object URL.\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        if (/objecturl/i.test(type)) {\n            window.URL = window.URL || window.webkitURL || window.mozURL;\n            return window.URL.createObjectURL(file);\n        }\n\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function requestFullscreen(element) {\n    if (!(element instanceof Element)) {\n        return Promise.reject('Invalid argument.');\n    }\n\n    if (element.requestFullscreen) {\n        return element.requestFullscreen();\n    }\n\n    if (element.webkitRequestFullscreen) {\n        return element.webkitRequestFullscreen();\n    }\n\n    if (element.mozRequestFullScreen) {\n        return element.mozRequestFullScreen();\n    }\n\n    if (element.msRequestFullscreen) {\n        return element.msRequestFullscreen();\n    }\n\n    return Promise.reject('Cannot change to full screen.');\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method creates text file.\n * @param {string} text This argument is string.\n * @return {string} This is returned as text file.\n */\nexport function toTextFile(text) {\n    /**\n     * This function converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    const toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    const base64  = window.btoa(toAscii(String(text)));\n    const dataURL = `data:text/plain;base64,${base64}`;\n\n    return dataURL;\n}\n","'use strict';\n\nimport { SoundModule } from './SoundModule';\nimport { OscillatorModule } from './OscillatorModule';\nimport { OneshotModule } from './OneshotModule';\nimport { NoiseModule } from './NoiseModule';\nimport { AudioModule } from './AudioModule';\nimport { MediaModule } from './MediaModule';\nimport { StreamModule } from './StreamModule';\nimport { MixerModule } from './MixerModule';\nimport { ProcessorModule} from './ProcessorModule';\nimport { MIDI } from './MIDI';\nimport { MML } from './MML';\nimport { Effector } from './SoundModule/Effectors/Effector';\nimport {\n    ajax,\n    convertTime,\n    decode,\n    exitFullscreen,\n    file,\n    requestFullscreen,\n    read,\n    toFrequencies,\n    toTextFile\n} from './XSound';\n\nconst global = (typeof window !== 'undefined') ? window : {};\n\nglobal.AudioContext = global.AudioContext || global.webkitAudioContext;\n\nlet XSound;\n\nconst IS_XSOUND = Boolean(global.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'noise'      : new NoiseModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'processor'  : new ProcessorModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `NoiseModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `ProcessorModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'noise', 'audio', 'media', 'stream', 'mixer', 'processor', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|NoiseModule|AudioModule|MediaModule|StreamModule|MixerModule|ProcessorModule|MIDI|MML|Oscillator}\n     */\n    XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot'  :\n            case 'noise'    :\n            case 'audio'    :\n            case 'media'    :\n            case 'stream'   :\n            case 'mixer'    :\n            case 'processor':\n            case 'midi'     :\n            case 'mml'      :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.ajax              = ajax;\n    XSound.convertTime       = convertTime;\n    XSound.decode            = decode;\n    XSound.exitFullscreen    = exitFullscreen;\n    XSound.file              = file;\n    XSound.requestFullscreen = requestFullscreen;\n    XSound.read              = read;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.toTextFile        = toTextFile;\n\n    XSound.Effector = Effector;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'noise'      : new NoiseModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'processor'  : new ProcessorModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot'  :\n                case 'noise'    :\n                case 'audio'    :\n                case 'media'    :\n                case 'stream'   :\n                case 'mixer'    :\n                case 'processor':\n                case 'midi'     :\n                case 'mml'      :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Autoplay Policy\n    const setup = () => {\n        XSound.setup().then(() => {}).catch(() => {});\n\n        document.removeEventListener('click',      setup, true);\n        document.removeEventListener('mousedown',  setup, true);\n        document.removeEventListener('mouseup',    setup, true);\n        document.removeEventListener('touchstart', setup, true);\n        document.removeEventListener('touchend',   setup, true);\n    };\n\n    document.addEventListener('click',      setup, true);\n    document.addEventListener('mousedown',  setup, true);\n    document.addEventListener('mouseup',    setup, true);\n    document.addEventListener('touchstart', setup, true);\n    document.addEventListener('touchend',   setup, true);\n\n} else {\n    XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n}\n\n// for `<script>`\nglobal.XSound = XSound;\nglobal.X      = XSound;  // Alias of `XSound`\n\n// for ESModules and SSR (Server Side Rendering)\nif (typeof exports !== 'undefined') {\n    exports.XSound = XSound;\n    exports.X      = XSound;  // Alias of `XSound`\n}\n"],"sourceRoot":""}